#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, aimy, seg1,seg2,seg3,seg4,seg5,head,flare;

static-var  AboveGround, restore_delay, statechg_DesiredState, statechg_StateChanging, isAiming, frameslefttoshot;


#define WORMSIZE 100 // This is for scaling move animations

// Signal definitions
#define SIG_AIM				2 

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com

#define MAX_SEG_VELOCITY <5.00>
#define SEG_ACCELERATION <0.05>
#define SEG_JERK <0.02>
#define SEG_PRECISION <0.02>
static-var segvelocity, segtarget, segposition, segdelta, timetozero, deceleratethreshold, gameFrame, segacceleration;


#define MAX_AIMY1_VELOCITY <18.00>
#define AIMY1_ACCELERATION <0.1>
#define AIMY1_JERK <0.1>
#define AIMY1_PRECISION <0.1>
static-var aimy1velocity, aimy1target, aimy1position, aimy1delta, aimy1acceleration;


Motion(){
	var i;
	i =0;
	while(1){
	
		segdelta =  segtarget - segposition ;
			
		if( ( get ABS(segdelta) > SEG_PRECISION ) OR (get ABS(segvelocity) > SEG_JERK)){
			//Clamp segposition and segdelta between <-180>;<180>
			while (segposition >  <180>) segposition = segposition - <360>;
			while (segposition < <-180>) segposition = segposition + <360>;
			while (segdelta >  <180>) segdelta = segdelta - <360>;
			while (segdelta < <-180>) segdelta = segdelta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(segvelocity) / segacceleration;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(segvelocity)) - (timetozero * (timetozero - 1) * segacceleration / 2); 
			
			//get PRINT ( segdelta , deceleratethreshold, segvelocity, timetozero );
			
			if (get ABS(segdelta) <= deceleratethreshold){ //we need to decelerate
				if (segvelocity > 0) segvelocity = segvelocity - segacceleration;
				else 				   segvelocity = segvelocity + segacceleration;
			}	
			else //we need to accelerate
			{
				if (segdelta > 0) segvelocity = get MIN(       MAX_SEG_VELOCITY, segvelocity + segacceleration); 
				else                segvelocity = get MAX((-1) * MAX_SEG_VELOCITY, segvelocity - segacceleration);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(segvelocity) < SEG_JERK){
				if ((segdelta >        SEG_JERK)) segvelocity =        SEG_JERK;
				if ((segdelta < (-1) * SEG_JERK)) segvelocity = (-1) * SEG_JERK;
			}
			
			segposition = segposition + segvelocity; 
			
			
			turn seg1 to x-axis segposition now;
			turn seg2 to x-axis segposition now;
			turn seg3 to x-axis segposition now;
			turn seg4 to x-axis segposition now;
			turn seg5 to x-axis segposition now;
			turn head to x-axis segposition now;
			
			
			segdelta = segtarget - segposition ; 
			if ((segdelta < <1>) AND (segdelta > <-1>)){
				//return (1); // INPITCH
			
			}
		}
		
		
		//aaimy1delta = aimy1position - aimy1target;
		aimy1delta = aimy1target - aimy1position;

		if( ( get ABS(aimy1delta) > AIMY1_PRECISION ) OR (get ABS(aimy1velocity) > AIMY1_JERK)){
		
			//Clamp aimy1position and aimy1delta between <-180>;<180>
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(aimy1velocity) / aimy1acceleration;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * aimy1acceleration / 2); 
			
			//get PRINT ( aimy1delta , deceleratethreshold , aimy1velocity, timetozero );
			
			if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
				if (aimy1velocity > 0) aimy1velocity = aimy1velocity - aimy1acceleration;
				else 				   aimy1velocity = aimy1velocity + aimy1acceleration;
			}	
			else //we need to accelerate
			{
				if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + aimy1acceleration); 
				else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - aimy1acceleration);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(aimy1velocity) < AIMY1_JERK){
				//this line will only have effect if our delta is less than jerk
				aimy1velocity = aimy1delta;
			
				if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;			
				if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK; 
				
			}
			
			aimy1position = aimy1position + aimy1velocity; 
			turn aimy to y-axis aimy1position now;
			aimy1delta = aimy1target - aimy1position ; 	
			if ((aimy1delta < <7>) AND (aimy1delta > <-7>)){
				//return (1); // INHEADING
			}
		}
		//aimy1velocity = 0;
		
		sleep 30;
		i = i + 1;
		if (AboveGround ==1 ){
		
		// this random motion sucks
		/*	if ((isAiming == 0) OR ((isAiming == 1) AND (frameslefttoshot > 15) ) ){
				if (RAND(0,3) == 1){
					segtarget =  segtarget + RAND(-3,3);
					aimy1target = aimy1target + RAND(-10,10);
				}
		 	}
		 */
		 
		 // lets have the worm do a Z wave instead
		 //	KSIN:	return int(1024*math::sinf(TAANG2RAD*(float)p1));
		 
		 	#define AMPLITUDE  100 / 200
		 	#define PHASE 10900
		 	#define FREQUENCY 1000

		 	var basefreq;
		 	var sin;
		 	basefreq = i*FREQUENCY;

		 	var j;
		 	j = 0;
		 	// some serious stack overflow going on here!
		 	j = basefreq + 1 * PHASE;
		 	sin = get KSIN(j);
		 	turn seg1 to z-axis sin * AMPLITUDE now;
		 	
		 	j = basefreq + 2 * PHASE;
		 	sin = get KSIN(j);
		 	turn seg2 to z-axis sin * AMPLITUDE now;
		 	
		 	j = basefreq + 3 * PHASE;
		 	sin = get KSIN(j);
		 	turn seg3 to z-axis sin * AMPLITUDE now;
		 	
		 	j = basefreq + 4 * PHASE;
		 	sin = get KSIN(j);
		 	turn seg4 to z-axis sin * AMPLITUDE now;
		 	
		 	j = basefreq + 5 * PHASE;
		 	sin = get KSIN(j);
		 	turn seg5 to z-axis sin * AMPLITUDE now;
		 	
		 	j = basefreq + 6 * PHASE;
		 	sin = get KSIN(j);
		 	turn head to z-axis sin * AMPLITUDE now;
		 	 
		 	
		}
	}
}


Go()
{
	//get PRINT(111);
	set ARMORED to 0;
	move seg1 to y-axis [0] speed [1] * WORMSIZE;
	
	sleep 250;
	segtarget = <0>;
	wait-for-move seg1 along x-axis;
	AboveGround = 1;
}

Stop()
{	
	set ARMORED to 1;
	AboveGround = 0;
	segtarget = <-14>;
	move seg1 to y-axis [-1] * WORMSIZE speed [0.8] * WORMSIZE;
	
	
	wait-for-move seg1 along x-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	segvelocity = 0;
	segtarget= 0;
	segposition = 0;
	segdelta= 0;
	timetozero = 0;
	deceleratethreshold= 0;
	gameFrame= 0;
	segacceleration =  SEG_ACCELERATION;

	aimy1velocity= 0;
	aimy1target =0;
	aimy1position= 0;
	aimy1delta =0;
	aimy1acceleration = AIMY1_ACCELERATION;

	hide flare;
	hide flare;
	restore_delay = 2000;
	AboveGround = 0;
	call-script InitState();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
 	//move aimpoint to y-axis [8] now;
 	start-script RequestState(1);
 	start-script Motion();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script RequestState(1);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	
	start-script RequestState(0);

	isAiming = 1;
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !AboveGround )
	{
		sleep 250;
	}
	aimy1target = heading;
	aimy1delta = aimy1target - aimy1position;
	
	segtarget = -1 * pitch /  6;
	
	while (get ABS(aimy1delta) > <10>){
		sleep 30;
	}
	
	frameslefttoshot = (GET WEAPON_RELOADSTATE(1)) - (GET GAME_FRAME);
	
	if (frameslefttoshot < 15){ // GET WEAPON_RELOADSTATE(1) gives the frame weapon 1 can fire on
		// if we can fire in 10 frames, do the spit
		
		
			segtarget = segtarget -500;
			segacceleration = 10 * SEG_ACCELERATION;
			sleep 150;
			
			segtarget = segtarget + 000;
	
			sleep 150;
			segacceleration = SEG_ACCELERATION;

	
	}
	
	// once we are pretty near to the target heading, as above, we need to do a quick shooty anim:
	
	isAiming = 0;
	start-script RestoreAfterDelay();
	return (1);
}
/*

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !AboveGround )
	{
		sleep 250;
	}
	turn top to y-axis heading speed <300.000000>;
	turn firepoint to x-axis <0.000000> - pitch speed <110.000000>;
	wait-for-turn top around y-axis;
	wait-for-turn firepoint around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}*/

Shot1()
{
	//call-script lua_FlameShot(1);
	//emit-sfx 1024 + 0 from flare;
	//segtarget = segtarget +  (Rand( 100, 200 ));
	//aimy1target = aimy1target +  (Rand( 0, 400 ) - 200);
	return (TRUE);
}

FirePrimary()
{
	//segtarget = segtarget + get RAND(0, 10000);

}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		//it recedes
		
		
		
		
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode seg1 type BITMAPONLY | NOHEATCLOUD;
		explode seg3 type BITMAPONLY | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode seg1 type BITMAPONLY | NOHEATCLOUD;
		explode seg3 type BITMAPONLY | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode seg1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode seg3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode seg5 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
 		return(corpsetype);
 	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode seg1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode seg3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode seg5 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}