piece body,head,tail,lthigh,lknee,lshin,lfoot,rthigh,rknee,rshin,rfoot,rsack,lsack, aimy1;

static-var aMoving, bMoving, bAiming, bCanAim, shooting_num, base_speed, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			16
#define SIG_RESTORE			32

#include "sfxtype.h"
#include "exptype.h"


// For N:\animations\chicken_2legged_fast_anim_walk.blend Created by https://github.com/Beherith/Skeletor_S3O V((0, 2, 8))
#define MOVESCALE 250 //How much extra body sway the chicken should have. Scale this with size of chicken
#define MOVESPEED  5  //How many frames per animation cycle, valid 2-10
#define ANIMAMPLITUDE 85 //How big steps the chicken should take, valid 20-200
#define LUHAND lsack  //define these as the left and right head thingies
#define RUHAND rsack  
#define LLHAND lsack  //define these as the left and right head thingies
#define RLHAND rsack  
#define SIG_WALK 64 //these defines are needed before includes!
#include "chicken_walk_2legged.h"

#define IDLEMOVESCALE 100
#define IDLEAMPLITUDE 50
#define IDLESPEED 15
#include "chicken_idle_2legged.h"

#define BASEPIECE body //needed for HitByWeapon
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100
#include "chicken_hitbyweapon.h"



lua_FlameShot(weapon) //Distortion and lups flame effect
{
  return 0;
}

// this animation uses the static-var animFramesPerKeyframe which contains how many frames each keyframe takes
static-var maxSpeed, animFramesPerKeyframe;

// REMEMBER TO animspeed = 6 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = MOVESPEED; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * MOVESPEED) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<1) animSpeed=1;
		if (animspeed>=2*MOVESPEED) animSpeed = 2*MOVESPEED;
		sleep 197;
	}
}
StartMoving(){
	signal SIG_WALK;
	bMoving=TRUE;
	start-script Walk();
}
StopMoving(){
	signal SIG_WALK;
	bMoving=FALSE;
	call-script StopWalking();
	start-script Idle();
}



Create()
{
	emit-sfx 1024 + 2 from body;
	animSpeed = 6;
	animAmplitude = ANIMAMPLITUDE;
	start-script UnitSpeed();
}

Activate()
{	

}

Deactivate()
{

}

RestoreAfterDelay()
{
	sleep 1000;
	turn aimy1 to y-axis 0 speed <250.000000>;
	turn aimy1 to x-axis 0 speed <200.000000>;
}


AimFromPrimary(piecenum)
	{	piecenum=head;	}

QueryPrimary(piecenum)
	{	piecenum=head; }

AimFromSecondary(piecenum)
	{	piecenum=head;	}

QuerySecondary(piecenum)
	{	piecenum=lsack; }



AimPrimary(heading,pitch)
{
    signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//nasty stuff here
	/* 	while( 255 > heading )
		{
			set UNKNOWN_UNIT_VALUE(82) to 0 - 1000 + get UNKNOWN_UNIT_VALUE(82);
			heading = heading + 1000;
			sleep 1;
		}
		while( heading > 255 )
		{
			set UNKNOWN_UNIT_VALUE(82) to 1000 + get UNKNOWN_UNIT_VALUE(82);
			heading = heading - 1000;
			sleep 1;
		}	
		*/
	if (heading > <60>) heading = <60>;
	if (heading < <-60>) heading = <-60>;
	turn aimy1 to y-axis heading speed <175>;
	turn aimy1 to x-axis 0 -pitch speed <175>;
	wait-for-turn aimy1 around y-axis;
	wait-for-turn aimy1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading,pitch)
	{
  	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	if (heading > <60>) heading = <60>;
	if (heading < <-60>) heading = <-60>;
	turn aimy1 to y-axis heading speed <175>;
	turn aimy1 to x-axis 0 -pitch speed <175>;
	wait-for-turn aimy1 around y-axis;
	wait-for-turn aimy1 around x-axis;
	start-script RestoreAfterDelay();
	return(1);
	}

Shot1()
	{ }
Shot2()
	{
	turn lsack to y-axis <30> speed <200>;
	turn rsack to y-axis <-30> speed <200>;
	move rsack to x-axis [-1] speed [9];
	move lsack to x-axis [1] speed [9];;
	wait-for-turn lsack around y-axis;
	turn lsack to y-axis <0> speed <20>;
	turn rsack to y-axis <0> speed <20>;
	move rsack to x-axis [0] speed [0.3];
	move lsack to x-axis [0] speed [0.3];
	call-script lua_FlameShot(2);
	return (head);
	}

SweetSpot(piecenum)
	{	piecenum=body;	}	
	
Killed( severity, corpsetype )
	{
	corpsetype = 1;

	emit-sfx 1025 from body;
	emit-sfx 1025 from head; 
	emit-sfx 1025 from tail; 
	emit-sfx 1025 from lthigh; 
	emit-sfx 1025 from lknee; 
	emit-sfx 1025 from lshin; 
	emit-sfx 1025 from lfoot; 
	emit-sfx 1025 from rthigh; 
	emit-sfx 1025 from rknee; 
	emit-sfx 1025 from rshin; 
	emit-sfx 1025 from rfoot;
	
	explode body     type FALL | NOHEATCLOUD;
	explode head     type FALL | NOHEATCLOUD;
	explode tail     type FALL | NOHEATCLOUD;
	explode lthigh   type FALL | NOHEATCLOUD;
	explode lknee    type FALL | NOHEATCLOUD;
	explode lshin    type FALL | NOHEATCLOUD;
	explode lfoot    type FALL | NOHEATCLOUD;
	explode rthigh   type FALL | NOHEATCLOUD;
	explode rknee    type FALL | NOHEATCLOUD;
	explode rshin    type FALL | NOHEATCLOUD;
	explode rfoot    type FALL | NOHEATCLOUD;

	return( 0 );
	}