#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  body, head, tail, lthigh, lknee, lshin, lfoot, rthigh,
       rknee, rshin, rfoot, rsack, lsack, aimy1;

static-var  bMoving, Static_Var_2;

// Signal definitions
#define SIG_AIM				2

// For N:\animations\chicken_2legged_fast_anim_walk.blend Created by https://github.com/Beherith/Skeletor_S3O V((0, 2, 8))
#define MOVESCALE 750 //How much extra body sway the chicken should have. Scale this with size of chicken
#define MOVESPEED  9  //How many frames per animation cycle, valid 2-10
#define ANIMAMPLITUDE 55 //How big steps the chicken should take, valid 20-200
#define LUHAND lsack  //define these as the left and right head thingies
#define RUHAND rsack  
#define LLHAND lsack  //define these as the left and right head thingies
#define RLHAND rsack  
#define SIG_WALK 64 //these defines are needed before includes!
#include "chicken_walk_2legged.h"

#define IDLEMOVESCALE 100
#define IDLEAMPLITUDE 50
#define IDLESPEED 30
#include "chicken_idle_2legged.h"

#define BASEPIECE body //needed for HitByWeapon
#define HITSPEED <15.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 100
#include "chicken_hitbyweapon.h"



lua_FlameShot(weapon) //Distortion and lups flame effect
{
  return 0;
}

// this animation uses the static-var animFramesPerKeyframe which contains how many frames each keyframe takes
static-var maxSpeed, animFramesPerKeyframe;

// REMEMBER TO animspeed = 6 in Create() !!
UnitSpeed(){
	maxSpeed = get MAX_SPEED; // this returns cob units per frame i think
	animFramesPerKeyframe = MOVESPEED; //we need to calc the frames per keyframe value, from the known animtime
	maxSpeed = maxSpeed + (maxSpeed /(2*animFramesPerKeyframe)); // add fudge
	while(TRUE){
		animSpeed = (get CURRENT_SPEED);
		if (animSpeed<1) animSpeed=1;
		animSpeed = (maxSpeed * MOVESPEED) / animSpeed; 
		//get PRINT(maxSpeed, animFramesPerKeyframe, animSpeed); //how to print debug info from bos
		if (animSpeed<1) animSpeed=1;
		if (animspeed>=2*MOVESPEED) animSpeed = 2*MOVESPEED;
		sleep 197;
	}
}
StartMoving(){
	signal SIG_WALK;
	bMoving=TRUE;
	start-script Walk();
}
StopMoving(){
	signal SIG_WALK;
	bMoving=FALSE;
	call-script StopWalking();
	start-script Idle();
}



Create()
{
	emit-sfx 1024 + 2 from body;
	animSpeed = 6;
	animAmplitude = ANIMAMPLITUDE;
	start-script UnitSpeed();
}

SweetSpot(piecenum)
{
	piecenum = body;
}

AimFromPrimary(piecenum)
{
	piecenum = head;
}

QueryPrimary(piecenum)
{
	piecenum = head;
}

RestoreAfterDelay()
{
	sleep 1000;
	turn aimy1 to y-axis 0 speed <250.000000>;
	turn aimy1 to x-axis 0 speed <200.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (pitch > <60>) pitch = <60>;
	if (pitch < <-60>) pitch = <-60>;
	
	if (heading > <60>) heading = <60>;
	if (heading < <-60>) heading = <-60>;
	turn aimy1 to y-axis heading speed <250.000000>;
	turn aimy1 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn aimy1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	turn lsack to y-axis <30.000000> speed <200.000000>;
	turn rsack to y-axis <-30.000000> speed <200.000000>;
	move rsack to x-axis [-1.000000] speed [9.000000];
	move lsack to x-axis [1.000000] speed [9.000000];
	wait-for-turn lsack around y-axis;
	set CHANGE_TARGET to 1;
	turn lsack to y-axis <0.000000> speed <20.000000>;
	turn rsack to y-axis <0.000000> speed <20.000000>;
	move rsack to x-axis [0.000000] speed [0.300000];
	move lsack to x-axis [0.000000] speed [0.300000];
}


Killed(severity, corpsetype)
{
	corpsetype = 1;	
	
	emit-sfx 1025 from body;
	emit-sfx 1025 from head; 
	emit-sfx 1025 from tail; 
	emit-sfx 1025 from lthigh; 
	emit-sfx 1025 from lknee; 
	emit-sfx 1025 from lshin; 
	emit-sfx 1025 from lfoot; 
	emit-sfx 1025 from rthigh; 
	emit-sfx 1025 from rknee; 
	emit-sfx 1025 from rshin; 
	emit-sfx 1025 from rfoot;
	
	explode body type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode head type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode tail type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lthigh type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lknee type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lshin type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rthigh type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rknee type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rshin type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode rsack type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode lsack type FALL | EXPLODE_ON_HIT | NOHEATCLOUD;
}
