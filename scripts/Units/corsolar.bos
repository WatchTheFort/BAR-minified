
#include "exptype.h"


piece  base, fan, d1,d2,d3,d4;

static-var  recentlyHit, wantOpen;

#define DEBUG
#define WRAPFUNCTIONS
#include "../debug.h"

#define SIGNAL_TURNON 4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	start-script SmokeUnit();
	recentlyHit = 0;
	wantOpen = 1;
	DEBUGFUNC(CREATE,0,0);
}

// open it on when built
// close it up when hit
// open it when time passed
// dont open it while hit
// dont reopen it if off after being hit !!!
// dont let any of the above conflict in time. 

Open()
{
	turn d1 to x-axis <90> speed <30>;
	turn d3 to x-axis <-90> speed <30>;
	turn d1 to y-axis <180> speed <60>;
	turn d3 to y-axis <180> speed <60>;
	
	turn d2 to z-axis <-90> speed <30>;
	turn d4 to z-axis <90> speed <30>;
	turn d2 to y-axis <180> speed <60>;
	turn d4 to y-axis <180> speed <60>;
	wait-for-turn d1 around x-axis;
	spin fan around y-axis speed <15> accelerate <0.1>;
	set ARMORED to 0;
	set YARD_OPEN to 0;
	set ACTIVATION to 100;
}

Close()
{
	set ACTIVATION to 0;

	stop-spin fan around y-axis decelerate <0.2>;

	turn d1 to x-axis <0> speed <30>;
	turn d3 to x-axis <0> speed <30>;
	turn d1 to y-axis <0> speed <60>;
	turn d3 to y-axis <0> speed <60>;
	
	turn d2 to z-axis <0> speed <30>;
	turn d4 to z-axis <0> speed <30>;
	turn d2 to y-axis <0> speed <60>;
	turn d4 to y-axis <0> speed <60>;
	wait-for-turn d1 around x-axis;

	set ARMORED to 1;
	set YARD_OPEN to 1;
}

Activate()
{
	get PRINT(8);
	//wantOpen = 1;
	if( recentlyHit )
	{
		set ACTIVATION to 0; // dont open it while hit, feedback it
		return (0);
	}
	call-script Open();
}

Deactivate()
{
	//wantOpen = 0;
	get PRINT(-8);
	call-script Close();
}

HitByWeapon(anglex, anglez)
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	recentlyHit = 1;
	start-script Close();

	sleep 8000;
	recentlyHit = 0;
	//if (wantOpen){
		start-script Open();
	//}
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type BITMAPONLY | NOHEATCLOUD;
		explode fan type BITMAPONLY | NOHEATCLOUD;
		explode d2 type BITMAPONLY | NOHEATCLOUD;
		explode d3 type BITMAPONLY | NOHEATCLOUD;
		explode d4 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type FALL | NOHEATCLOUD;
		explode d2 type FALL | NOHEATCLOUD;
		explode d3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode d4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		
		explode fan type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode d2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode d3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode d4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode d1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode d2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode d3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode d4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fan type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
