#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, spindle, aimpoint;

static-var  gun_1,aimy1velocity, aimy1target, aimy1position;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare;
	gun_1 = 0;
	aimy1velocity = 0;
	aimy1target = 0;
	aimy1position = 0;
	start-script SmokeUnit();
}
	/*
PositionSpindle()
{
	turn spindle to z-axis <120.027473>*gun_1 speed <400.093407>;

	if( gun_1 == 1 )
	{
		turn spindle to z-axis <0.000000> speed <400.093407>;
	}
	else if( gun_1 == 2 )
	{
		turn spindle to z-axis <120.027473> speed <400.093407>;
	}
	else if( gun_1 == 3 )
	{
		turn spindle to z-axis <-120.027473> speed <400.093407>;
	}
	//wait-for-turn spindle around z-axis;

}
	*/
/*AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.043956>;
	turn turret to x-axis <0.000000> - pitch speed <200.043956>;
	//call-script PositionSpindle();
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}*/
//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com

#define MAX_AIMY1_VELOCITY <9.00>
#define AIMY1_ACCELERATION <0.2>
#define AIMY1_JERK <1.0>
#define AIMY1_PRECISION <1.2>
static-var aimy1delta, timetozero, deceleratethreshold, framestolock;

AimWeapon1(heading, pitch)
{

	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	//We can do this any time
	turn turret to x-axis <10.000000> - pitch speed <45.000000>;
	
	aimy1target = heading;
	aimy1delta = aimy1position - aimy1target;
	
	while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
	while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
	
	//apply initial jerk at low velocities
	if ((aimy1delta < (-1) * AIMY1_JERK) AND (aimy1velocity >= 0) AND (aimy1velocity < AIMY1_JERK)) {
		aimy1velocity = AIMY1_JERK;
		//get PRINT(1,aimy1delta,aimy1target, aimy1velocity);
	}
	if ((aimy1delta > AIMY1_JERK) AND (aimy1velocity <= 0) AND (aimy1velocity > (-1) * AIMY1_JERK)) {
		aimy1velocity = (-1) * AIMY1_JERK;
		//get PRINT(0,aimy1delta,aimy1target, aimy1velocity);
	}
	
	while( ( get ABS(aimy1delta) > AIMY1_PRECISION ) OR (get ABS(aimy1velocity) > AIMY1_JERK)){
		framestolock = framestolock+1;
		//Clamp aimy1position and aimy1delta between <-180>;<180>
		while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
		while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
		while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
		while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
	
		//number of frames required to decelerate to 0
		timetozero = get ABS(aimy1velocity) / AIMY1_ACCELERATION;
		
		//distance from target where we should start decelerating, always 'positive'
		//pos = t * v - (t*(t-1)*a/2)
		deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_ACCELERATION / 2); 
		
		//get PRINT (heading, aimy1position,0,0);
		//get PRINT ( aimy1delta , deceleratethreshold, aimy1velocity, timetozero );
		
		if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
			if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
			else 				   aimy1velocity = aimy1velocity + AIMY1_ACCELERATION;
		}	
		else //we need to accelerate
		{
			if (get ABS(aimy1velocity) < MAX_AIMY1_VELOCITY) { //CLAMP SPEED between -1 and 1 MAX_AIMY1_VELOCITY
				if (aimy1delta > 0) aimy1velocity = aimy1velocity + AIMY1_ACCELERATION; 
				else aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
			}

		}
		
		//Apply jerk at very low velocities
		if (get ABS(aimy1velocity) < AIMY1_JERK){
			if ((aimy1delta > AIMY1_JERK)){// AND (aimy1velocity >= 0) ) {
				aimy1velocity = AIMY1_JERK;
				//get PRINT(1,aimy1delta,aimy1target, aimy1velocity);
			}
			if ((aimy1delta < (-1) * AIMY1_JERK)){ // AND (aimy1velocity <= 0)) {
				aimy1velocity = (-1) * AIMY1_JERK;
				//get PRINT(0,aimy1delta,aimy1target, aimy1velocity);
			}
		}
		
		aimy1position = aimy1position + aimy1velocity; 
		turn turret to y-axis aimy1position now;
		aimy1delta = aimy1target - aimy1position; 	
		
		sleep 30;
	}
	//get PRINT( framestolock);
	framestolock = 0;
	aimy1velocity = 0;
	//start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	++gun_1;
	if( gun_1 >= 3 )
	{
		gun_1 = 0;
	}
	sleep 175;
	turn spindle to z-axis <120.027473>*gun_1 speed <400.093407>;
	//start-script PositionSpindle();
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode turret type BITMAPONLY;
		explode spindle type FIRE | SMOKE | FALL | BITMAPONLY;
		explode flare type BITMAPONLY;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode flare type FIRE | SMOKE | FALL;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type FIRE | SMOKE | FALL;
		explode spindle type BITMAPONLY;
		explode flare type SMOKE | FALL;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode spindle type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
	return corpsetype;
}
