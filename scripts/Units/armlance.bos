#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, cockpit, bombdrop, lwing1, lwing2, rwing1, rwing2, lflap1, lflap2, rflap1, rflap2, lsensor, rsensor,lbox, rbox,  connectors,  rthruster, lthruster, thrust1, thrust2;
piece base, cockpit, rwing, rventblade, rbwing, lwing, lventblade, lbwing, fdoor, bdoor, bombdrop, thrust1;
static-var  statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		turn lwing to y-axis <-0> speed <45>;
		turn rwing to y-axis <0> speed <45>;
		move lwing to x-axis [0] speed [10.0];
		move rwing to x-axis [0] speed [10.0];
		sleep 750;
	}
		if( TRUE )
	{
		move lwing to x-axis [0] speed [10.0];
		move rwing to x-axis [0] speed [10.0];
		spin rventblade around y-axis speed <540> accelerate <5>;
		spin lventblade around y-axis speed <540> accelerate <5>;
		sleep 1000;
	}
	sleep 12;
}

deactivatescr()
{
	if( TRUE )
	{
		move lwing to x-axis [6.0] speed [10.0];
		move rwing to x-axis [-6.0] speed [10.0];
		sleep 683;
	}
	
	if( TRUE )
	{
		turn lwing to y-axis <45> speed <45>;
		turn rwing to y-axis <-45> speed <45>;
		stop-spin lventblade around y-axis decelerate <1>;
		stop-spin rventblade around y-axis decelerate <1>;
		sleep 1000;
	}
	sleep 33;
}


#define BASEPIECE base
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( (healthpercent < 66) AND (healthpercent > 0 ))
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	move lwing to x-axis [6.0] now;
	move rwing to x-axis [-6.0] now;
	turn lwing to y-axis <45> now;
	turn rwing to y-axis <-45> now;
	
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = bombdrop;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cockpit type BITMAPONLY | NOHEATCLOUD;
		explode lwing type BITMAPONLY | NOHEATCLOUD;
		explode lbwing type BITMAPONLY | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
		explode rbwing type BITMAPONLY | NOHEATCLOUD;
		explode bombdrop type SMOKE | FALL | NOHEATCLOUD;
		explode lventblade type BITMAPONLY | NOHEATCLOUD;
		explode rventblade type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cockpit type BITMAPONLY | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lbwing type BITMAPONLY | NOHEATCLOUD;
		explode rwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rbwing type BITMAPONLY | NOHEATCLOUD;
		explode bombdrop type BITMAPONLY | NOHEATCLOUD;
		explode lventblade type BITMAPONLY | NOHEATCLOUD;
		explode rventblade type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cockpit type BITMAPONLY | NOHEATCLOUD;
		explode lwing type BITMAPONLY | NOHEATCLOUD;
		explode lbwing type SMOKE | FALL | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
		explode rbwing type SMOKE | FALL | NOHEATCLOUD;
		explode bombdrop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lventblade type BITMAPONLY | NOHEATCLOUD;
		explode rventblade type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode cockpit type BITMAPONLY | NOHEATCLOUD;
		explode lwing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lbwing type BITMAPONLY | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
		explode rbwing type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode bombdrop type BITMAPONLY | NOHEATCLOUD;
		explode lventblade type BITMAPONLY | NOHEATCLOUD;
		explode rventblade type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
