

#include "exptype.h"

piece  base, head1, head2, nano1, nano2, pad;

static-var  spray, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIGNAL_TURNON 4

Go()
{	
  turn head1 to y-axis <0> now;
	turn head1 to y-axis <45> speed <100>;
	turn head2 to y-axis <0> now;
	turn head2 to y-axis <-45> speed <100>;
	wait-for-turn head1 around y-axis;
	sleep 464;
  
  set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
  
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
  
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
  
	turn head1 to y-axis <0> speed <100>;
	turn head2 to y-axis <0> speed <100>;
	wait-for-turn head1 around y-axis;
	sleep 500;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide pad;
	hide nano1;
	hide nano2;
	spray = base;
	call-script InitState();
	return (0);
}

QueryNanoPiece(pieceIndex)
{
	if( spray == 0 )
	{
		pieceIndex = nano1;
	}
	if( spray != 0 )
	{
		pieceIndex = nano2;
	}
	spray = !spray;
	return (0);
}


StartBuilding()
{
	show nano1;
	show nano2;
}

StopBuilding()
{
	hide nano1;
	hide nano2;
}

Activate()
{
	signal SIGNAL_TURNON;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
    sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

QueryBuildInfo(pieceIndex)
{
	pieceIndex = pad;
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode head1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type BITMAPONLY | NOHEATCLOUD;
		explode head2 type BITMAPONLY | NOHEATCLOUD;
		explode nano2 type BITMAPONLY | NOHEATCLOUD;
		explode pad type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode head1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD;
		explode head2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pad type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode head1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head2 type SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pad type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode head1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode head2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode pad type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
