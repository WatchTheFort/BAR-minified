#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, wing1, wing2, thrusta, thrustb, thrustc,  bomb1, bomb2;
static-var  Static_Var_1, gun_1, statechg_DesiredState, statechg_StateChanging;


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

activatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [0.000000] now;
		move wing1 to x-axis [-2.400000] speed [1.646088];
		move wing1 to z-axis [0.000000] now;
		move wing1 to z-axis [-0.500000] speed [0.342920];
		move wing2 to x-axis [0.000000] now;
		move wing2 to x-axis [2.449994] speed [1.680371];
		move wing2 to z-axis [0.000000] now;
		move wing2 to z-axis [-0.550000] speed [0.377228];
		turn wing1 to z-axis <0.000000> now;
		turn wing1 to z-axis <0.890110> speed <0.615385>;
		turn wing2 to z-axis <0.000000> now;
		turn wing2 to z-axis <-2.692308> speed <1.846154>;
		sleep 1458;
	}
	sleep 66;
}

deactivatescr()
{
	if( TRUE )
	{
		move wing1 to x-axis [-2.400000] now;
		move wing1 to x-axis [0.000000] speed [1.646088];
		move wing1 to z-axis [-0.500000] now;
		move wing1 to z-axis [0.000000] speed [0.342920];
		move wing2 to x-axis [2.449994] now;
		move wing2 to x-axis [0.000000] speed [1.680371];
		move wing2 to z-axis [-0.550000] now;
		move wing2 to z-axis [0.000000] speed [0.377228];
		turn wing1 to z-axis <0.890110> now;
		turn wing1 to z-axis <0.000000> speed <0.615385>;
		turn wing2 to z-axis <-2.692308> now;
		turn wing2 to z-axis <0.000000> speed <1.846154>;
		sleep 1458;
	}
	sleep 66;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( (healthpercent < 66) AND (healthpercent > 0 ))
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.049451> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.038462>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
}

Create()
{
	Static_Var_1 = 0;
	gun_1 = flare1;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

FirePrimary()
{
	if( gun_1 )
	{
	hide bomb1;
	}
	else
	{
	hide bomb2;
	}
	
	gun_1 = !gun_1;
}

AimPrimary()
{
	if( gun_1 )
	{
	show bomb1;
	}
	else
	{
	show bomb2;
	}
	return (1);
	
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		//explode base type SHATTER | NOHEATCLOUD;
		explode thrusta type FALL | BITMAP1 | NOHEATCLOUD;
		explode flare1 type FALL | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		//explode base type SHATTER | NOHEATCLOUD;
		explode flare1 type FALL | BITMAP2 | NOHEATCLOUD;
		//explode flare2 type FALL | BITMAP3 | NOHEATCLOUD;
		explode thrustc type FALL | BITMAP4 | NOHEATCLOUD;
		//explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
		explode thrusta type FALL | BITMAP1 | NOHEATCLOUD;
		explode thrustb type FALL | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		//explode base type SHATTER | NOHEATCLOUD;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		//explode rearthrust type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
		explode wing1 type SHATTER | BITMAP5 | NOHEATCLOUD;
		explode thrusta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	//explode base type SHATTER | NOHEATCLOUD;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	//explode thrustc type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	//explode wing1 type SHATTER | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	explode thrusta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode thrustb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
