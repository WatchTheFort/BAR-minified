
#include "exptype.h"

piece  rflare, lflare, flarea, flareb, base, boxb, boxa, turret,
       turreta, turretb, wake, rbarrel, lbarrel, sleeve ;

static-var  gun_3, restore_delay, gun_2, oldHead;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3 1024

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"


RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*4;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


Create()
{
	hide wake;
	hide flarea;
	hide lflare;
	hide rflare;
	hide flareb;
	hide lflare;
	hide rflare;
	gun_3 = rflare;
	gun_2 = rflare;
	restore_delay = 3000;
	turn turret to x-axis <-25.000000> speed <25.000000>;
	turn boxa to x-axis <-25.000000> speed <25.000000>;
	turn boxb to x-axis <-25.000000> speed <25.000000>;
    spin turret around y-axis speed <25.0>;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
    spin turret around y-axis speed <25.0>;
	turn sleeve to x-axis <0.000000> speed <25.000000>;
	turn turreta to y-axis <-25.000000> speed <25.000000>;
	turn boxa to x-axis <0.000000> speed <25.000000>;
	turn turretb to y-axis <-25.000000> speed <25.000000>;
	turn boxb to x-axis <0.000000> speed <25.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 14000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	if( gun_2 )
	{
		turn turretb to y-axis heading speed <455.000000>;
		turn boxb to x-axis <0.000000> - pitch speed <430.000000>;
		wait-for-turn turretb around y-axis;
		wait-for-turn boxb around x-axis;
	}
	else
	{
		turn turreta to y-axis heading speed <455.000000>;
		turn boxa to x-axis <0.000000> - pitch speed <430.000000>;
		wait-for-turn turreta around y-axis;
		wait-for-turn boxa around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	turn turret to y-axis heading speed <755.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <730.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	gun_2 = !gun_2;
}

FireWeapon3()
{
	if( gun_3 )
	{
	    emit-sfx 1024 + 0 from lflare;
		move lbarrel to z-axis [-2.400000] speed [500.000000];
		sleep 100;
		wait-for-move lbarrel along z-axis;
		move lbarrel to z-axis [0.000000] speed [3.000000];
	}
	else
	{
	    emit-sfx 1024 + 0 from rflare;
		move rbarrel to z-axis [-2.400000] speed [500.000000];
		sleep 100;
		wait-for-move rbarrel along z-axis;
		move rbarrel to z-axis [0.000000] speed [3.000000];
	}
	gun_3 = !gun_3;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = base;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = turreta + gun_2;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = sleeve;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = base;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flarea + gun_2;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = gun_3;
}

/*
AimWeapon4(heading, pitch)
{
	sleep 100;
	return (1);
}

FireWeapon4()
{
	sleep 100;
}

QueryWeapon4(pieceIndex)
{
	sleep 100;
}

AimFromWeapon4(pieceIndex)
{
	pieceIndex = base;
}
*/



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type BITMAPONLY | NOHEATCLOUD;
		explode turretb type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type FALL | NOHEATCLOUD;
		explode boxa type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boxa type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarea type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode boxb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turreta type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode boxa type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode boxb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
