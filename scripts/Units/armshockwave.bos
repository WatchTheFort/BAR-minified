#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, column, turret, barrel1, barrel2, flare1, flare2;
piece  base, pins, clock, shaft, emp, flare, aimy;

static-var  meatspin, Static_Var_1, restore_delay, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_7, Static_Var_8, statechg_DesiredState, statechg_StateChanging,
            Stunned;

// Signal definitions
#define SIG_AIM				2


Go()
{
	if (Stunned) {
		return (0);
	}
	//spin column around y-axis speed Static_Var_3 accelerate Static_Var_4;
	spin clock around y-axis speed meatspin accelerate <0.500000>;
}

Stop()
{
	//stop-spin column around y-axis decelerate Static_Var_5;
	stop-spin clock around y-axis decelerate <1.000000>;
	wait-for-turn clock around y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;
	meatspin = 500;

	Static_Var_3 = 0;
	Static_Var_4 = 91;
	Static_Var_5 = 182;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	Static_Var_1 = 1;
	call-script InitState();
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 8;
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn shaft to x-axis <0> speed <30>;
	start-script RequestState(1);
}
SetStunned(State)
{
	Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
	if (State) {
	    call-script Stop();
	}else{
	    if (statechg_DesiredState == 0) {
	        call-script Go();
	    }
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

SetSpeed(Func_Var_1)
{
	meatspin = Func_Var_1 * 2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn shaft to y-axis heading speed <60>;
	turn emp to x-axis <0.000000> - pitch speed <70>;
	wait-for-turn shaft around y-axis;
	wait-for-turn emp around x-axis;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
}


QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = aimy;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY;
		explode pins type BITMAPONLY;
		explode shaft type BITMAPONLY;
		explode emp type FIRE | SMOKE | FALL;
		explode flare type BITMAPONLY;
		explode clock type BITMAPONLY;
		explode aimy type BITMAPONLY;
		return(0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY;
		explode shaft type FIRE | SMOKE | FALL;
		explode emp type FIRE | SMOKE | FALL;
		explode flare type FALL;
		explode aimy type FALL;
		return(0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode pins type BITMAPONLY;
		explode shaft type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode emp type EXPLODE_ON_HIT | SMOKE | FALL;
		explode flare type SMOKE | FALL;
		explode clock type BITMAPONLY;
		explode aimy type EXPLODE_ON_HIT | SMOKE | FALL;
		return(0);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY;
		explode pins type EXPLODE_ON_HIT | FIRE | FALL;
		explode shaft type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
		explode emp type EXPLODE_ON_HIT | FIRE | FALL;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL;
		explode clock type EXPLODE_ON_HIT | FIRE | FALL;
		explode aimy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL;
}