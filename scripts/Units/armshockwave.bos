
#include "exptype.h"

//piece  base, column, turret, barrel1, barrel2, flare1, flare2;
piece  base, pins, clock, shaft, emp, flare, aimy;

static-var  meatspin,  restore_delay, statechg_DesiredState, statechg_StateChanging,
            Stunned;

// Signal definitions
#define SIGNAL_AIM1 256


Go()
{
	if (Stunned) {
		return (0);
	}
	spin clock around y-axis speed meatspin accelerate <0.500000>;
}

Stop()
{
	stop-spin clock around y-axis decelerate <1.000000>;
	wait-for-turn clock around y-axis;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;
	meatspin = 500;
	call-script InitState();
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 8;
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn shaft to x-axis <0> speed <30>;
	start-script RequestState(1);
}
SetStunned(State)
{
	Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
	if (State) {
	    call-script Stop();
	}else{
	    if (statechg_DesiredState == 0) {
	        call-script Go();
	    }
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

SetSpeed(windOrMetal)
{
	meatspin = windOrMetal * 2;
}



AimWeapon1(heading, pitch)
{
	
	  if ( meatspin == 0 ) // only allow attacking when extracting
		  {
		  return (0);
		  }

	
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn shaft to y-axis heading speed <60>;
	turn emp to x-axis <0.000000> - pitch speed <70>;
	wait-for-turn shaft around y-axis;
	wait-for-turn emp around x-axis;
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
}


QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimy;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pins type BITMAPONLY | NOHEATCLOUD;
		explode shaft type BITMAPONLY | NOHEATCLOUD;
		explode emp type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode clock type BITMAPONLY | NOHEATCLOUD;
		explode aimy type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode shaft type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emp type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		explode aimy type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pins type BITMAPONLY | NOHEATCLOUD;
		explode shaft type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emp type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		explode clock type BITMAPONLY | NOHEATCLOUD;
		explode aimy type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode pins type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode shaft type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emp type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode clock type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode aimy type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return(corpsetype);
}