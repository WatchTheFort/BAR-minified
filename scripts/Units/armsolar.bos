
#include "exptype.h"

piece  base, dish1, dish2, dish3, dish4, emit;

static-var  recentlyHit;

#define SIGNAL_TURNON 4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = SFXTYPE_WHITESMOKE;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


Create()
{
	start-script SmokeUnit();
	recentlyHit = 0;
}

// open it on when built
// close it up when hit
// open it when time passed
// dont open it while hit
// dont reopen it if off after being hit
// dont let any of the above conflict in time. 


Activate()
{
	if( recentlyHit )
	{
		set ACTIVATION to 0; // dont open it while hit, feedback it
		return (0);
	}

	turn dish1 to x-axis <-90.016484> speed <60.000000>;
	turn dish3 to x-axis <90.016484> speed <60.000000>;
	turn dish2 to z-axis <-90.016484> speed <60.000000>;
	turn dish4 to z-axis <90.016484> speed <60.000000>;
	wait-for-turn dish1 around x-axis;
	wait-for-turn dish2 around x-axis;
	wait-for-turn dish3 around z-axis;
	wait-for-turn dish4 around z-axis;
	show emit;
	set ARMORED to 0;
	set YARD_OPEN to 0;
	set ACTIVATION to 100;
}

Deactivate()
{
	set ACTIVATION to 0;
	turn dish1 to x-axis <0.000000> speed <120.000000>;
	turn dish3 to x-axis <0.000000> speed <120.000000>;
	turn dish2 to z-axis <0.000000> speed <120.000000>;
	turn dish4 to z-axis <0.000000> speed <120.000000>;
	wait-for-turn dish1 around x-axis;
	wait-for-turn dish2 around x-axis;
	wait-for-turn dish3 around z-axis;
	wait-for-turn dish4 around z-axis;
	hide emit;
	set ARMORED to 1;
	set YARD_OPEN to 1;
}

HitByWeapon(anglex, anglez)
{

	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
	recentlyHit = 1;
	start-script Deactivate();

	sleep 8000;
	recentlyHit = 0;
	
	start-script Activate();
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type BITMAPONLY | NOHEATCLOUD;
		explode dish2 type BITMAPONLY | NOHEATCLOUD;
		explode dish3 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish3 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode dish4 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode dish3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
