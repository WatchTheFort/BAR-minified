
#include "exptype.h"

piece  flare1, flare2, base, turret, barrel1, barrel2, sleeves;

static-var  nextBarrel, trajectoryMode, lastHeading;

#define SIGNAL_AIM2			1
#define LOW_TRAJECTORY		0
#define HIGH_TRAJECTORY		1


Create()
{
	hide flare1;
	hide flare2;
	hide flare1;
	hide flare2;
	nextBarrel = 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

RequestState(requestedState)
{
	trajectoryMode = requestedstate;
}

Activate()
{
	signal SIGNAL_AIM2;
	start-script RequestState(HIGH_TRAJECTORY);
}

Deactivate()
{
	signal SIGNAL_AIM2;
	start-script RequestState(LOW_TRAJECTORY);
}

restoreAfterDelay()
{
	set-signal-mask SIGNAL_AIM2;
	sleep 3500;
	if(lastHeading > <-180.000000>)
	{
		turn turret to y-axis <180.000000> speed <30.000000>;
	}
	if(lastHeading > <-135.000000>)
	{
		turn turret to y-axis <270.000000> speed <30.000000>;
	}
	if(lastHeading > <-45.000000>)
	{
		turn turret to y-axis <0.000000> speed <30.000000>;
	}
	if(lastHeading > <45.000000>)
	{
		turn turret to y-axis <90.000000> speed <30.000000>;
	}
	if(lastHeading > <135.000000>)
	{
		turn turret to y-axis <180.000000> speed <30.000000>;
	}
	turn sleeves to x-axis <0.000000> speed <45.000000>;
}

aimCommon(heading, pitch)
{
	turn turret to y-axis heading speed <30.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <45.000000>;
	lastHeading = heading;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script restoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	if( trajectoryMode != LOW_TRAJECTORY )
	{
		return(0);
	}

	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	call-script aimCommon(heading, pitch);

	// Prevent low-trajectory "bonus shots" while high-trajectory is reloading
	var reloading;
	reloading = (get GAME_FRAME) < (get WEAPON_RELOADSTATE(2));
	if( reloading )
	{
		return(0);
	}

	return (1);
}

AimWeapon2(heading, pitch)
{
	if( trajectoryMode != HIGH_TRAJECTORY )
	{
		return(0);
	}

	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	call-script aimCommon(heading, pitch);
	return (1);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = sleeves;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = sleeves;
}

fireCommon()
{
	if( nextBarrel == 0 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-6.250000] now;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [2.500000];
	}
	if( nextBarrel == 1 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-6.250000] now;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [2.500000];
	}
	nextBarrel = !nextBarrel;
}

FireWeapon1()
{
	call-script fireCommon();
}

FireWeapon2()
{
	call-script fireCommon();
}

QueryWeapon1(pieceIndex)
{
	if( nextBarrel == 0 )
	{
		pieceIndex = flare1;
	}
	if( nextBarrel == 1 )
	{
		pieceIndex = flare2;
	}
}

QueryWeapon2(pieceIndex)
{
	if( nextBarrel == 0 )
	{
		pieceIndex = flare1;
	}
	if( nextBarrel == 1 )
	{
		pieceIndex = flare2;
	}
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeves type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeves type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode flare2 type FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeves type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
