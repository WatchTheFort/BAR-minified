#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret, barrel1, barrel2, sleeves;

static-var  aiming, nextBarrel, trajectoryMode, gun_2, wpn1_lasthead, wpn2_lasthead, inStateChange, restore_delay;

#define SIG_AIM				2
#define SIG_AIM_2			8
#define LOW_TRAJECTORY		0
#define HIGH_TRAJECTORY		1

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate)
{
	if( inStateChange )
	{
		return (0);
	}

	inStateChange = TRUE;
	trajectoryMode = requestedstate;
	inStateChange = FALSE;
}

Create()
{
	hide flare1;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	dont-cache barrel1;
	dont-cache barrel2;
	dont-cache sleeves;
	dont-cache turret;
	dont-shade flare1;
	dont-shade flare2;
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade sleeves;
	dont-shade turret;
	nextBarrel = 0;
	trajectoryMode = LOW_TRAJECTORY;
	aiming = FALSE;
	gun_2 = barrel1;
	inStateChange = FALSE;
	restore_delay = 100;
	start-script SmokeUnit();
}


Activate()
{
	start-script RequestState(LOW_TRAJECTORY);
}

Deactivate()
{
	start-script RequestState(HIGH_TRAJECTORY);
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep restore_delay;
	// start-script ExecuteRestoreAfterDelay();
}

Reload()
{
	sleep 2000;
	gun_2 = barrel1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	if( aiming == TRUE OR trajectoryMode == LOW_TRAJECTORY OR gun_2 == 1 )
	{
		return(0);
	}
	aiming = TRUE;
	turn turret to y-axis heading speed <30.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	aiming = FALSE;
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	if( aiming == TRUE OR trajectoryMode == HIGH_TRAJECTORY OR gun_2 == 1 )
	{
		return(0);
	}
	aiming = TRUE;
	turn turret to y-axis heading speed <30.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	start-script RestoreAfterDelay();
	wpn2_lasthead = heading;
	aiming = FALSE;
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

FirePrimary()
{
	gun_2 = turret;
	if( nextBarrel == 0 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-6.250000] now;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [2.500000];
	}
	if( nextBarrel == 1 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-6.250000] now;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [2.500000];
	}
	nextBarrel = !nextBarrel;
	start-script Reload();
}

FireSecondary()
{
	gun_2 = turret;
	if( nextBarrel == 0 )
	{
	    emit-sfx 1024 + 0 from flare1;
		move barrel1 to z-axis [-6.250000] now;
		sleep 100;
		move barrel1 to z-axis [0.000000] speed [2.500000];
	}
	if( nextBarrel == 1 )
	{
	    emit-sfx 1024 + 0 from flare2;
		move barrel2 to z-axis [-6.250000] now;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [2.500000];
	}
	nextBarrel = !nextBarrel;
	start-script Reload();
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

QuerySecondary(piecenum)
{
	piecenum = flare1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeves type BITMAPONLY | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type BITMAPONLY | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode sleeves type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FALL | NOHEATCLOUD;
		explode flare2 type FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeves type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeves type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
