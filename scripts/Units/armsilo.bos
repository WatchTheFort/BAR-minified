//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     17
// NumberOfPieces                      5
// LengthOfScripts                     2f7
// NumberOfStaticVars                  4
// UKZero                              0
// OffsetToScriptCodeIndexArray        c08
// OffsetToScriptNameOffsetArray       c4c
// OffsetToPieceNameOffsetArray        c90
// OffsetToScriptCode                  2c
// OffsetToNameArray                   ca4

// OffsetToFirstName                   ca4

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, flare, light1, light2, light3, light4;

static-var  restore_delay, shotcount;

static-var  silo_state;
// 0 = closed
// 1 = opening
// 2 = opened
// 3 = closing, fired missile
// 4 = closing, no missile fired

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

// Signal definitions
#define SIG_AIM				2

Create()
{
	hide flare;
	hide light1;
	hide light2;
	hide light3;
	hide light4;
	shotcount = 0;
	restore_delay = 15000;
	silo_state = 0;
	return (0);
}

lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

OpenSilo()
{
	if ( (silo_state==0) OR (silo_state==4) )
	{
		// the sound effect
		emit-sfx 4096 + 1 from flare;
	}
	if ( NOT (silo_state==3) )
	{
		// 8.5 seconds to open up
		silo_state = 1;
		show light1;
		show light2;
		show light3;
		show light4;
		turn door1 to x-axis <127.5> speed <15>;
		turn door2 to x-axis <-127.5> speed <15>;
		wait-for-turn door1 around x-axis;
		wait-for-turn door2 around x-axis;
		silo_state = 2;
	}
}

CloseSiloDoors()
{
	// 30 seconds to close from <127.5> open position
	hide light1;
	hide light2;
	hide light3;
	hide light4;
	turn door1 to x-axis <0> speed <4.25>;
	turn door2 to x-axis <0> speed <4.25>;
	wait-for-turn door1 around x-axis;
	wait-for-turn door2 around x-axis;
	silo_state = 0;
}

CloseSilo_Fired()
{
	silo_state = 3;
	signal SIG_AIM; // kill any OpenSilo threads
	start-script CloseSiloDoors();
}

RestoreAfterDelay()
{
	sleep restore_delay;
	if ( NOT (silo_state==3) )
	{
		silo_state = 4;
		start-script CloseSiloDoors();
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	start-script OpenSilo();
	start-script RestoreAfterDelay();
	if (silo_state == 2)
	{
		return (1);
	}
	return (0);
}

FirePrimary()
{
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);
	call-script lua_UnitScriptLight(2, shotcount);
	start-script CloseSilo_Fired();
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
