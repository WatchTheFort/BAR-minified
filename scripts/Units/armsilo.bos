//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     17
// NumberOfPieces                      5
// LengthOfScripts                     2f7
// NumberOfStaticVars                  4
// UKZero                              0
// OffsetToScriptCodeIndexArray        c08
// OffsetToScriptNameOffsetArray       c4c
// OffsetToPieceNameOffsetArray        c90
// OffsetToScriptCode                  2c
// OffsetToNameArray                   ca4

// OffsetToFirstName                   ca4

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, flare, light1, light2, light3, light4;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging, shotcount;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
				emit-sfx 4096 + 1 from flare;
				show light1;
				show light2;
				show light3;
				show light4;
				turn door1 to x-axis <180> speed <10>;
				turn door2 to x-axis <-180> speed <10>;
		sleep 8500;
	}
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
				turn door1 to x-axis <0> speed <10>;
				turn door2 to x-axis <0> speed <10>;
				sleep 1500;
				hide light1;
				hide light2;
				hide light3;
				hide light4;
				wait-for-turn door1 around x-axis;
		sleep 3000;
	}
			sleep 10000;
	return (0);
}

Go()
{
	call-script activatescr();
	gun_1 = flare;
	return (0);
}

Stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

// LaunchLights()
// {
// 	show light1;
// 	show light2;
// 	show light3;
// 	show light4;
// 	sleep 10000;
// 	hide light1;
// 	hide light2;
// 	hide light3;
// 	hide light4;
// 	return (1);
// }

Create()
{
	hide flare;
	hide light1;
	hide light2;
	hide light3;
	hide light4;
	gun_1 = base;
	restore_delay = 3000;
	call-script InitState();
	return (0);
}

lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"


Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	gun_1 = base;
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);
	call-script lua_UnitScriptLight(2, shotcount);
	start-script RequestState(1);
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
