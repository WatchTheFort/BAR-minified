//            * Header Info *
// VersionSignature                     4
// NumberOfScripts                     8
// NumberOfPieces                      4
// LengthOfScripts                     1d4
// NumberOfStaticVars                  1
// UKZero                              0
// OffsetToScriptCodeIndexArray        77c
// OffsetToScriptNameOffsetArray       79c
// OffsetToPieceNameOffsetArray        7bc
// OffsetToScriptCode                  2c
// OffsetToNameArray                   7cc

// OffsetToFirstName                   7cc

#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, flare;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 6
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

SmokeUnit(healthpercent, sleeptime, smoketype)
/*     3:*/{
/*     6:*/	while( get BUILD_PERCENT_LEFT )
/*     8:*/	{
/*     a:*/		sleep 400;
/*     d:*/	}
/*     f:*/	while( TRUE )
/*    11:*/	{
/*    14:*/		healthpercent = get HEALTH;
/*    1b:*/		if( healthpercent < 66 )
/*    1d:*/		{
/*    22:*/			smoketype = 256 | 2;
/*    2c:*/			if( Rand( 1, 66 ) < healthpercent )
/*    2e:*/			{
/*    33:*/				smoketype = 256 | 1;
/*    35:*/			}
/*    37:*/			emit-sfx smoketype from base;
/*    39:*/		}
/*    3e:*/		sleeptime = healthpercent * 50;
/*    45:*/		if( sleeptime < 200 )
/*    47:*/		{
/*    49:*/			sleeptime = 200;
/*    4b:*/		}
/*    4d:*/		sleep sleeptime;
/*    50:*/	}
/*    52:*/	return (0);
/*    53:*/	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
/*    80:*/}

Create()
/*    78:*/{
/*    86:*/	gun_1 = turret;
/*    88:*/	start-script SmokeUnit();
/*    8d:*/	return (0);
/*    8e:*/}

AimPrimary(heading, pitch)
/*    90:*/{
/*    92:*/	signal SIG_AIM;
/*    95:*/	set-signal-mask SIG_AIM;
/*    9a:*/	turn turret to y-axis heading speed <200.000000>;
/*    9d:*/	wait-for-turn turret around y-axis;
/*    a2:*/	return (1);
/*    a3:*/}

FirePrimary()
/*    a3:*/{
/*    a5:*/	sleep 500;
/*    f2:*/	return (0);
/*    f3:*/}

AimFromPrimary(piecenum)
/*    f4:*/{
/*    f6:*/	piecenum = flare;
/*    fa:*/	return (0);
/*    fb:*/}

QueryPrimary(piecenum)
/*    fc:*/{
/*    fe:*/	piecenum = flare;
/*   102:*/	return (0);
/*   103:*/}

SweetSpot(piecenum)
/*   104:*/{
/*   106:*/	piecenum = turret;
/*   10a:*/	return (0);
/*   10b:*/}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
