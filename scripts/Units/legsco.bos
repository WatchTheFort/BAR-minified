
#include "exptype.h"

piece  base, flare, turret, sleeve, barrel, gun, turretl, barrell, flarel, turretr, barrelr, flarer;

static-var  restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3 1024



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100

Create()
{
	hide flare;
	hide flarer;
	hide flarel;
	restore_delay = 3000;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <40>;
	turn gun to x-axis <0.000000> speed <40>;
	turn turretr to y-axis <0.000000> speed <120>;
	turn turretl to y-axis <0.000000> speed <120>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <35.005495>;
	turn gun to x-axis <0.000000> - pitch speed <35.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	move sleeve to z-axis [-3.000000] speed [1250.000000];
	move barrel to z-axis [-6.000000] speed [1250.000000];
	wait-for-move sleeve along z-axis;
	move barrel to z-axis [0.000000] speed [7.500000];
	move sleeve to z-axis [0.000000] speed [7.500000];
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = gun;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn turretl to y-axis heading speed <120>;
	turn barrell to x-axis <0.000000> - pitch speed <45>;
	wait-for-turn turretl around y-axis;
	wait-for-turn barrell around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	show flarel;
	sleep 100;
	hide flarel;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = barrell;
	return (0);
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flarel;
	return (0);
}

AimWeapon3(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	turn turretr to y-axis heading speed <120>;
	turn barrelr to x-axis <0.000000> - pitch speed <45>;
	wait-for-turn turretr around y-axis;
	wait-for-turn barrelr around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	show flarer;
	sleep 100;
	hide flarer;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = barrelr;
	return (0);
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = flarer;
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
