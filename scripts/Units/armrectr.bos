#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

//piece  pelvis, lthigh, rthigh, torso, rleg, rfoot, lleg, lfoot,
//       luparm, ruparm, rnano, lnano;

piece	pelvis, head, rhip, rleg, rfoot, lhip, lleg, lfoot, nano; 

static-var  bMoving, notBuilding, nanoNozzle, moveSpeed, currentSpeed,
			statechg_DesiredState, statechg_StateChanging, animSpeed;

walk()
{
	//maxvelocity = 2.6400001049042= 75 elmos/sec
	//animspeed 36 elmos/cycle
	// default rleg y=-3.5 z=-2.0
	//step 0
	if (bMoving)
	{
	turn rhip to x-axis <0> speed <198.000000> *  currentSpeed / 100; 
	move rleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <0> speed <150.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <0> speed <310.000000> *  currentSpeed / 100; 
	move lleg to y-axis [2] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <-16> speed <80.000000> *  currentSpeed / 100; 

	turn head to y-axis <0> speed <25.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0] now;
	turn pelvis to z-axis <0> speed <15.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <0> speed <15.000000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;

	}
	if (bMoving)
	{
	//step 1
	turn rhip to x-axis <54> speed <324.000000> *  currentSpeed / 100; 
	move rleg to y-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [2] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <-55> speed <275.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <-47> speed <235.000000> *  currentSpeed / 100; 
	move lleg to y-axis [-0.5] speed [12.500000] *  currentSpeed / 100; 
	move lleg to z-axis [0.5] speed [12.500000] *  currentSpeed / 100; 
	turn lfoot to x-axis <-5> speed <55.000000> *  currentSpeed / 100; 

	turn head to y-axis <3> speed <15.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0.5] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <2> speed <10.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <1.5> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 2
	turn rhip to x-axis <62> speed <48.000000> *  currentSpeed / 100; 
	move rleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <0> speed <275.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <-33> speed <70.000000> *  currentSpeed / 100; 
	move lleg to y-axis [-2] speed [7.500000] *  currentSpeed / 100; 
	move lleg to z-axis [2] speed [7.500000] *  currentSpeed / 100; 
	turn lfoot to x-axis <30> speed <175.000000> *  currentSpeed / 100; 

	turn head to y-axis <5> speed <10.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <3> speed <5.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <3> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 3
	turn rhip to x-axis <0> speed <372.000000> *  currentSpeed / 100; 
	move rleg to y-axis [2] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <-16> speed <80.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <0> speed <165.000000> *  currentSpeed / 100; 
	move lleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <0> speed <150.000000> *  currentSpeed / 100; 

	turn head to y-axis <0> speed <25.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0] now;
	turn pelvis to z-axis <0> speed <15.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <0> speed <15.000000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 4
	turn rhip to x-axis <-47> speed <282.000000> *  currentSpeed / 100; 
	move rleg to y-axis [-0.5] speed [12.500000] *  currentSpeed / 100; 
	move rleg to z-axis [0.5] speed [12.500000] *  currentSpeed / 100; 
	turn rfoot to x-axis <-5> speed <55.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <54> speed <270.000000> *  currentSpeed / 100; 
	move lleg to y-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [2] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <-55> speed <275.000000> *  currentSpeed / 100; 

	turn head to y-axis <-3> speed <15.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0.5] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <-2> speed <10.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <1.5> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 5
	turn rhip to x-axis <-33> speed <84.000000> *  currentSpeed / 100; 
	move rleg to y-axis [-2] speed [7.500000] *  currentSpeed / 100; 
	move rleg to z-axis [2] speed [7.500000] *  currentSpeed / 100; 
	turn rfoot to x-axis <30> speed <175.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <62> speed <40.000000> *  currentSpeed / 100; 
	move lleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <0> speed <275.000000> *  currentSpeed / 100; 

	turn head to y-axis <-5> speed <10.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <-3> speed <5.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <3> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}

}

walklegs()
{

	if (bMoving)
	{
	turn rhip to x-axis <0> speed <198.000000> *  currentSpeed / 100; 
	move rleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <0> speed <150.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <0> speed <310.000000> *  currentSpeed / 100; 
	move lleg to y-axis [2] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <-16> speed <80.000000> *  currentSpeed / 100; 


	move pelvis to y-axis [0] now;
	turn pelvis to z-axis <0> speed <15.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <0> speed <15.000000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;

	}
	
	if (bMoving)
	{
	//step 1
	turn rhip to x-axis <54> speed <324.000000> *  currentSpeed / 100; 
	move rleg to y-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [2] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <-55> speed <275.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <-47> speed <235.000000> *  currentSpeed / 100; 
	move lleg to y-axis [-0.5] speed [12.500000] *  currentSpeed / 100; 
	move lleg to z-axis [0.5] speed [12.500000] *  currentSpeed / 100; 
	turn lfoot to x-axis <-5> speed <55.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0.5] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <2> speed <10.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <1.5> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 2
	turn rhip to x-axis <62> speed <48.000000> *  currentSpeed / 100; 
	move rleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <0> speed <275.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <-33> speed <70.000000> *  currentSpeed / 100; 
	move lleg to y-axis [-2] speed [7.500000] *  currentSpeed / 100; 
	move lleg to z-axis [2] speed [7.500000] *  currentSpeed / 100; 
	turn lfoot to x-axis <30> speed <175.000000> *  currentSpeed / 100; 

	move pelvis to y-axis [0] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <3> speed <5.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <3> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 3
	turn rhip to x-axis <0> speed <372.000000> *  currentSpeed / 100; 
	move rleg to y-axis [2] speed [10.000000] *  currentSpeed / 100; 
	move rleg to z-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	turn rfoot to x-axis <-16> speed <80.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <0> speed <165.000000> *  currentSpeed / 100; 
	move lleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <0> speed <150.000000> *  currentSpeed / 100; 


	move pelvis to y-axis [0] now;
	turn pelvis to z-axis <0> speed <15.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <0> speed <15.000000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 4
	turn rhip to x-axis <-47> speed <282.000000> *  currentSpeed / 100; 
	move rleg to y-axis [-0.5] speed [12.500000] *  currentSpeed / 100; 
	move rleg to z-axis [0.5] speed [12.500000] *  currentSpeed / 100; 
	turn rfoot to x-axis <-5> speed <55.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <54> speed <270.000000> *  currentSpeed / 100; 
	move lleg to y-axis [-2] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [2] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <-55> speed <275.000000> *  currentSpeed / 100; 
	
	move pelvis to y-axis [0.5] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <-2> speed <10.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <1.5> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}
	if (bMoving)
	{

	//step 5
	turn rhip to x-axis <-33> speed <84.000000> *  currentSpeed / 100; 
	move rleg to y-axis [-2] speed [7.500000] *  currentSpeed / 100; 
	move rleg to z-axis [2] speed [7.500000] *  currentSpeed / 100; 
	turn rfoot to x-axis <30> speed <175.000000> *  currentSpeed / 100; 
	turn lhip to x-axis <62> speed <40.000000> *  currentSpeed / 100; 
	move lleg to y-axis [0] speed [10.000000] *  currentSpeed / 100; 
	move lleg to z-axis [0] speed [10.000000] *  currentSpeed / 100; 
	turn lfoot to x-axis <0> speed <275.000000> *  currentSpeed / 100; 


	move pelvis to y-axis [0] speed [2.500000] *  currentSpeed / 100; 
	turn pelvis to z-axis <-3> speed <5.000000> *  currentSpeed / 100; 
	turn pelvis to x-axis <3> speed <7.500000> *  currentSpeed / 100; 

	sleep 165 * currentSpeed / 100;
	}

}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		Func_Var_2 = notBuilding;
		if( Func_Var_1 )
		{
			if( Func_Var_2 )
			{
				call-script walk();
			}
			else
			{
				call-script walklegs();
			}
		}
		else
		{
			turn rhip to x-axis <0> speed <330.000000>;
			move rleg to y-axis [0] speed [20.000000];
			move rleg to z-axis [0] speed [20.000000];
			turn rfoot to x-axis <0> speed <300.000000>;
			turn lhip to x-axis <0> speed <620.000000>;
			move lleg to y-axis [0] speed [20.000000];
			move lleg to z-axis [0] speed [20.000000];
			turn lfoot to x-axis <0> speed <160.000000>;
		

			if (notBuilding) {
				turn head to y-axis <0> speed <50.000000>;
			}
		
			move pelvis to y-axis [0] speed [10];
			turn pelvis to z-axis <0> speed <30.000000>;
			turn pelvis to x-axis <0> speed <30.000000>;
		
			sleep 200;
		}
	}
}


#define BASEPIECE pelvis
#define HITSPEED <75.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		animSpeed = 6000 / currentSpeed;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from head;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{

//	turn luparm to x-axis <0.010989> speed <160.000000>;
//	turn ruparm to x-axis <0.010989> speed <160.000000>;
}

Stop()

{	

	set-signal-mask SIG_BUILD;
	set INBUILDSTANCE to 0;
	turn head to y-axis <0.000000> speed <160.000000>;
//	turn luparm to x-axis <45.000000> speed <160.000000>;
//	turn ruparm to x-axis <45.000000> speed <160.000000>;
//	wait-for-turn head around y-axis;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script Go();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	notBuilding = 1;
	nanoNozzle = 0;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	moveSpeed = get MAX_SPEED;
	animSpeed = 60;
	start-script SmokeUnit();
	//turn luparm to x-axis <45.010989> speed <45>;
//	turn ruparm to x-axis <45.010989> speed <45>;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn head to y-axis heading speed <260.000000>;
	wait-for-turn head around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 1000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = pelvis;
}

QueryNanoPiece(piecenum)
{
	piecenum = head + nanoNozzle;  //head was nano
	nanoNozzle = !nanoNozzle;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_5 = 0 - Func_Var_1;
}
*/

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode pelvis type BITMAPONLY | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lhip type BITMAPONLY | NOHEATCLOUD;
		explode lleg type BITMAPONLY | NOHEATCLOUD;
		explode lfoot type BITMAPONLY | NOHEATCLOUD;
		explode rhip type BITMAPONLY | NOHEATCLOUD;
		explode rleg type BITMAPONLY | NOHEATCLOUD;
		explode rfoot type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type FALL | NOHEATCLOUD;
		explode lhip type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rhip type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rleg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfoot type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode pelvis type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lhip type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type SMOKE | FALL | NOHEATCLOUD;
		explode rhip type SMOKE | FALL | NOHEATCLOUD;
		explode rleg type SMOKE | FALL | NOHEATCLOUD;
		explode rfoot type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode pelvis type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lhip type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lfoot type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rhip type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rleg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rfoot type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
