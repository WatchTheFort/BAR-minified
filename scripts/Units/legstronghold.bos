
#include "exptype.h"

piece  base, pole, turret, sleeve, barrel, flare, link, thrustrr, thrustrl, thrustfr, thrustfl, 
		thrustrra, thrustrla, thrustfra, thrustfla, 
		thrustrr2, thrustrl2, thrustfr2, thrustfl2, thrustrra2, thrustrla2, thrustfra2, thrustfla2;

static-var  moverate, restore_delay, wpn1_lasthead;

#define SIGNAL_AIM1 256


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100


Create()
{
	hide thrustfra;
	hide thrustfla;
	hide thrustrla;
	hide thrustrra;
	hide thrustfra2;
	hide thrustfla2;
	hide thrustrla2;
	hide thrustrra2;
	
	turn thrustfra to x-axis <-90> now; 
	turn thrustfla to x-axis <-90> now; 
	turn thrustrla to x-axis <-90> now; 
	turn thrustrra to x-axis <-90> now; 
	turn thrustfra2 to x-axis <-90> now; 
	turn thrustfla2 to x-axis <-90> now; 
	turn thrustrla2 to x-axis <-90> now; 
	turn thrustrra2 to x-axis <-90> now; 
	
	turn pole to x-axis <45> now;
	
	hide link;
	moverate = 0;
	restore_delay = 300;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
}



#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"


QueryTransport(pieceIndex)
{
	pieceIndex = link;
}

BeginTransport(targetHeight)
{
	move link to y-axis [0.0] - targetHeight now;
}

EndTransport()
{
}

Activate()
{
	show thrustfra;
	show thrustfla;
	show thrustrla;
	show thrustrra;
	show thrustfra2;
	show thrustfla2;
	show thrustrla2;
	show thrustrra2;
}

Deactivate()
{
	hide thrustfra;
	hide thrustfla;
	hide thrustrla;
	hide thrustrra;
	hide thrustfra2;
	hide thrustfla2;
	hide thrustrla2;
	hide thrustrra2;
}



StopMoving()
{
	signal 8;
	moverate = 0;
}

MoveRate0()
{
	turn thrustrr to x-axis <0.0> speed <80.0>;
	turn thrustrl to x-axis <0.0> speed <80.0>;
	turn thrustfr to x-axis <0.0> speed <80.0>;
	turn thrustfl to x-axis <0.0> speed <80.0>;
	turn thrustrr2 to x-axis <0.0> speed <80.0>;
	turn thrustrl2 to x-axis <0.0> speed <80.0>;
	turn thrustfr2 to x-axis <0.0> speed <80.0>;
	turn thrustfl2 to x-axis <0.0> speed <80.0>;
}

MoveRate1()
{
	//get PRINT(1);
	signal 8;
	set-signal-mask 8;
	moverate = 1;
	turn thrustrr to x-axis <10.0> speed <60.0>;
	turn thrustrl to x-axis <10.0> speed <60.0>;
	turn thrustfr to x-axis <10.0> speed <60.0>;
	turn thrustfl to x-axis <10.0> speed <60.0>;
	turn thrustrr2 to x-axis <10.0> speed <60.0>;
	turn thrustrl2 to x-axis <10.0> speed <60.0>;
	turn thrustfr2 to x-axis <10.0> speed <60.0>;
	turn thrustfl2 to x-axis <10.0> speed <60.0>;
}

MoveRate2()
{
	signal 8;
	set-signal-mask 8;
	moverate = 2;
	turn thrustrr to x-axis <20.0> speed <45.0>;
	turn thrustrl to x-axis <20.0> speed <45.0>;
	turn thrustfr to x-axis <20.0> speed <45.0>;
	turn thrustfl to x-axis <20.0> speed <45.0>;
	turn thrustrr2 to x-axis <20.0> speed <45.0>;
	turn thrustrl2 to x-axis <20.0> speed <45.0>;
	turn thrustfr2 to x-axis <20.0> speed <45.0>;
	turn thrustfl2 to x-axis <20.0> speed <45.0>;
}

MoveRate3()
{
	signal 8;
	set-signal-mask 8;
	moverate = 3;
	turn thrustrr to x-axis <0.0> speed <70.0>;
	turn thrustrl to x-axis <0.0> speed <70.0>;
	turn thrustfr to x-axis <0.0> speed <70.0>;
	turn thrustfl to x-axis <0.0> speed <70.0>;
	turn thrustrr2 to x-axis <0.0> speed <70.0>;
	turn thrustrl2 to x-axis <0.0> speed <70.0>;
	turn thrustfr2 to x-axis <0.0> speed <70.0>;
	turn thrustfl2 to x-axis <0.0> speed <70.0>;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	spin barrel around z-axis speed <600.0>;
	sleep restore_delay;
	spin barrel around z-axis speed <300.0>;
	sleep (restore_delay / 2);
	spin barrel around z-axis speed <150.0>;
	sleep (restore_delay / 4);
	stop-spin barrel around z-axis;
	wpn1_lasthead = 1000000;
	set-signal-mask 0;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn sleeve to y-axis heading speed <200.0>;
	turn sleeve to x-axis <0.0> - <45> - pitch speed <100.0>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn pole around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	spin barrel around z-axis speed <900.0>;
	emit-sfx 1024 + 0 from flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = sleeve;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type BITMAPONLY | NOHEATCLOUD;
		explode link type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		explode link type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
