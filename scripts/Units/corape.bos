#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  	base, body, lpaddle, rpaddle, rwing1, lwing1,
		rjet, rthrust, rwing2, rmislink, rmissile1, rflare, rflare1, 
		ljet, lthrust, lwing2, lmislink, lmissile1, lflare, lflare1;

static-var  gun_1, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( (healthpercent < 66) AND (healthpercent > 0 ))
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}
InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide rflare1;
	hide lflare1;
	gun_1 = rflare1;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare1;
	}
}

AimPrimary(heading, pitch)
{
	turn rwing1 to x-axis <0> -pitch speed <300>;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show rflare1;
		sleep 150;
		hide rflare1;
		gun_1 = lflare1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		show lflare1;
		sleep 150;
		hide lflare1;
		gun_1 = rflare1;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing1 type FALL | NOHEATCLOUD;
		explode lwing1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lwing1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
