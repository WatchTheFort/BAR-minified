#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rflare2, lflare2, base, rwing1, backbone, rjet, ljet;

static-var  gun_1, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 and healthpercent > 0 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide rflare2;
	hide lflare2;
	gun_1 = rflare2;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
	
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare2;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare2;
	}
}

AimPrimary(heading, pitch)
{
	turn rwing1 to x-axis <0> -pitch speed <300>;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show rflare2;
		sleep 150;
		hide rflare2;
		gun_1 = lflare2;
		return (0);
	}
	if( gun_1 == 1 )
	{
		show lflare2;
		sleep 150;
		hide lflare2;
		gun_1 = rflare2;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rflare2 type BITMAPONLY | NOHEATCLOUD;
		explode lflare2 type BITMAPONLY | NOHEATCLOUD;
		explode backbone type BITMAPONLY | NOHEATCLOUD;
		explode rjet type BITMAPONLY | NOHEATCLOUD;
		explode ljet type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rwing1 type FALL | NOHEATCLOUD;
		explode rflare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode backbone type FALL | NOHEATCLOUD;
		explode rjet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ljet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwing1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rflare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode backbone type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rjet type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ljet type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwing1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rflare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lflare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode backbone type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rjet type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ljet type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
