
#include "exptype.h"

piece  flare, base, doorr, doorl, prop, aimpoint;

static-var  restore_delay, currentSpeed, moveSpeed;
// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1


#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

Propcontrol()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*1000/moveSpeed;
		spin prop around z-axis speed <1.000000>*currentSpeed accelerate <10.000000>;
		sleep 100;
	}
}

Create()
{
	hide flare;
	hide flare;
	restore_delay = 3000;
	moveSpeed = get MAX_SPEED;
	start-script Propcontrol();
	return (0);
}

StartMoving()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from base;
		sleep 250;
		emit-sfx 1024 + 0 from base;
		emit-sfx 1024 + 1 from base;
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	signal SIGNAL_MOVE;
	return (0);
}

FireWeapon1()
{
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}




static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	move doorr to x-axis [0] speed [10];
	move doorl to x-axis [0] speed [10];

	wait-for-move doorr along x-axis;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	move doorr to x-axis [-2] speed [10];
	move doorl to x-axis [2] speed [10];
	
	wait-for-move doorr along x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode prop type FIRE | SMOKE | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode doorr type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode prop type FIRE | SMOKE | NOHEATCLOUD;
		explode doorl type NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | NOHEATCLOUD;
		explode prop type FIRE | SMOKE | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode prop type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | FIRE | NOHEATCLOUD;
	return corpsetype;
}
