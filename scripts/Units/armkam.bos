#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, lflare, rflare, lfin, rfin, rturret, lturret, thrusta, thrustb, engines;

// Signal definitions
#define SIG_MOVE			2


#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base

static-var isIdle, IdleX, IdleY, IdleZ, wasIdle;
IdleHover()
{
	while(TRUE){
		// Detect 'idleness' 
		wasIdle = isIdle;
		// get PRINT(get GAME_FRAME, get CURRENT_SPEED, (get UNIT_Y)/65500, (get GROUND_HEIGHT)/65500);
		if (((get CURRENT_SPEED) < 10000) AND (((get UNIT_Y) - (get GROUND_HEIGHT)) > [64] )) {
			isIdle = TRUE;
		}
		else
		{
			isIdle = FALSE;
		}
	
	
		if (isIdle){
			var newIdleX;
			newIdleX = Rand(-1*IDLEHOVERSCALE,IDLEHOVERSCALE);
			var newIdleY;
			newIdleY = Rand(-1*IDLEHOVERSCALE / 2,IDLEHOVERSCALE / 2);
			var newIdleZ;
			newIdleZ =  Rand(-1*IDLEHOVERSCALE,IDLEHOVERSCALE);
			var IdleSpeed;
			IdleSpeed = Rand(IDLEHOVERSPEED,IDLEHOVERSPEED*3); 
			if (IdleSpeed < 10) IdleSpeed = 10; //wierd div by zero error?
			
			//get PRINT(newIdleX,newIdleY,newIdleZ,IdleSpeed);
			
			move IDLEBASEPIECE to x-axis [0.25]*newIdleX speed [0.25]*(newIdleX - IdleX)*30/IdleSpeed;
			move IDLEBASEPIECE to y-axis [0.25]*newIdleY speed [0.25]*(newIdleY - IdleY)*30/IdleSpeed;
			move IDLEBASEPIECE to z-axis [0.25]*newIdleZ speed [0.25]*(newIdleZ - IdleZ)*30/IdleSpeed;
			
			//turn IDLEBASEPIECE to z-axis <0.25>  * newIdleX speed <0.25> * (newIdleX - IdleX)*30/IdleSpeed;
			turn IDLEBASEPIECE to y-axis <0.25>  * newIdleY speed <0.25> * (newIdleY - IdleY)*30/IdleSpeed;
			turn IDLEBASEPIECE to x-axis <-0.25> * newIdleZ speed <0.25> * (newIdleZ - IdleZ)*30/IdleSpeed;
			
			IdleX = newIdleX;
			IdleY = newIdleY;
			IdleZ = newIdleZ;
			sleep 1000*IdleSpeed/30;
			sleep 98;
		}
		else{
			if (wasIdle) {
				move IDLEBASEPIECE to x-axis [0] speed [0.25]*(IdleX);
				move IDLEBASEPIECE to y-axis [0] speed [0.25]*(IdleY);
				move IDLEBASEPIECE to z-axis [0] speed [0.25]*(IdleZ);
			
				//turn IDLEBASEPIECE to z-axis <0> speed <0.25>*(IdleX);
				turn IDLEBASEPIECE to y-axis <0> speed <0.25>*(IdleY);
				turn IDLEBASEPIECE to x-axis <0> speed <0.25>*(IdleZ);
			}
			sleep 1000;
		}
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
	while( TRUE )
	{
		//get PRINT(RAND(-100,100));
		healthpercent = get HEALTH;
		if( (healthpercent < 66) AND (healthpercent > 0 ))
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


static-var gun_1;
Create()
{
	gun_1=0;
	start-script SmokeUnit();
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn lturret to x-axis <0.000000> speed <50.000000>;
	turn rturret to x-axis <0.000000> speed <50.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 500;
	start-script ExecuteRestoreAfterDelay();
}


#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

MoveRate1()
{
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn base to z-axis <0.000000> speed <120.000000>;
	//start-script ProcessFlames();
}

MoveRate2()
{
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn engines to x-axis <90> speed <90>;
	//start-script ProcessFlames();
	sleep 1000;
	turn base to z-axis <240.000000> speed <120.000000>;
	wait-for-turn base around z-axis;
	turn base to z-axis <120.000000> speed <180.000000>;
	wait-for-turn base around z-axis;
	turn base to z-axis <0.000000> speed <120.000000>;
	
}

MoveRate3()
{
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	//start-script ProcessFlames();
	turn base to z-axis <0.000000> speed <120.000000>;
	
	turn engines to x-axis <90> speed <90>;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	return (1);
}

QueryPrimary(piecenum)
{
	if (gun_1==0)
	{
		piecenum = lflare;
		gun_1=1;
	}
	else 
	{
		piecenum=rflare;
		gun_1=0;
	}
}

FirePrimary()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	sleep 200;
	turn engines to x-axis <0> speed <90>;
	
	start-script RestoreAfterDelay();
}

StartMoving()
{
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	move lfin to z-axis [-8] speed [8];
	move rfin to z-axis [-8] speed [8];
	turn engines to x-axis <90> speed <90>;
	wait-for-move lfin along z-axis;
}

StopMoving()
{
	start-script RestoreAfterDelay();
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	move lfin to z-axis [0] speed [8];
	move rfin to z-axis [0] speed [8];
	
	turn engines to x-axis <0> speed <90>;
	wait-for-move lfin along z-axis;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode engines type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lfin type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode engines type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lfin type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode engines type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode rturret type BITMAPONLY | NOHEATCLOUD;
		explode rflare type BITMAPONLY | NOHEATCLOUD;
		explode lfin type BITMAPONLY | NOHEATCLOUD;
		explode lturret type BITMAPONLY | NOHEATCLOUD;
		explode lflare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
    explode base type BITMAPONLY | NOHEATCLOUD;
    explode rfin type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode engines type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
    explode thrustb type BITMAPONLY | NOHEATCLOUD;
    explode thrusta type BITMAPONLY | NOHEATCLOUD;
    explode rturret type BITMAPONLY | NOHEATCLOUD;
    explode rflare type BITMAPONLY | NOHEATCLOUD;
    explode lfin type BITMAPONLY | NOHEATCLOUD;
    explode lturret type BITMAPONLY | NOHEATCLOUD;
    explode lflare type BITMAPONLY | NOHEATCLOUD;
    return(corpsetype);
	return corpsetype;
}
