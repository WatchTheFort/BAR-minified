
#include "exptype.h"

piece  base, pad, head, wheel1, wheel2, nano, cagelight, cagelight_emit;

static-var  statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIGNAL_TURNON 4


activatescr()
{

	set ARMORED to 0;
	spin wheel1 around x-axis speed <120> accelerate <30>;
	spin wheel2 around x-axis speed <120> accelerate <30>;
	sleep 431;
}

deactivatescr()
{
	set ARMORED to 1;
	
	stop-spin wheel1 around x-axis decelerate <30>;
	stop-spin wheel2 around x-axis decelerate <30>;
	sleep 734;
}


OpenBuildArea()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
}

CloseBuildArea()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
}

Go()
{
	call-script activatescr();
	call-script OpenBuildArea();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseBuildArea();
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide pad;
	hide nano;
	hide cagelight_emit;

	set ARMORED to 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nano;
}

Activate()
{
	signal SIGNAL_TURNON;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIGNAL_TURNON;
	set-signal-mask SIGNAL_TURNON;
    sleep 5000;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding(heading)
{
	show nano;
	show cagelight_emit;
	spin cagelight_emit around y-axis speed <200>;
	spin pad around y-axis speed <0.000000>;
	return (0);
}

StopBuilding()
{
	hide nano;
	stop-spin pad around y-axis;
	hide cagelight_emit;
	turn cagelight_emit to y-axis <0> speed <1000>;
	return (0);
}

QueryBuildInfo(pieceIndex)
{
	pieceIndex = pad;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wheel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wheel2 type BITMAPONLY | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		explode nano type BITMAPONLY | NOHEATCLOUD;
		explode pad type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wheel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wheel2 type FALL | NOHEATCLOUD;
		explode head type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pad type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wheel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wheel2 type SMOKE | FALL | NOHEATCLOUD;
		explode head type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode pad type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode wheel1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wheel2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode pad type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
