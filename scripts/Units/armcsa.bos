#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//piece  base, engine, thrusta, thrustb, emit;
piece base, center, lwing, rwing, centerblad, backblade, thruster, thrusta, thrustb, nano, emit;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{

	move lwing to x-axis [0] speed[5];
	move rwing to x-axis [0] speed[5];
	spin centerblad around y-axis speed <540> accelerate <5>;
	spin backblade around x-axis speed <540> accelerate <5>;
		sleep 1000;
	}
	sleep 6;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
	move lwing to x-axis [7] speed[5];
	move rwing to x-axis [-7] speed[5];
	stop-spin centerblad around y-axis decelerate <1>;
	stop-spin backblade around y-axis decelerate <1>;

		sleep 1000;
	}
	sleep 7;
	return (0);
}

#define BASEPIECE base
#define HITSPEED <105.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"



SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( (healthpercent < 66) AND (healthpercent > 0 ))
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	return (0);
	move lwing to x-axis [7] now;
	move rwing to x-axis [-7] now;
	hide thrusta;
	hide thrustb;
	hide emit;
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;

}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

StartBuilding()
{
	set INBUILDSTANCE to 1;
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = emit;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
	corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thruster type BITMAPONLY | NOHEATCLOUD;
		explode center type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing type BITMAPONLY | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
	return(corpsetype);
	}
	if( severity <= 50 )
	{
	corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thruster type BITMAPONLY | NOHEATCLOUD;
		explode center type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
	return(corpsetype);
	}
	if( severity <= 99 )
	{
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thruster type BITMAPONLY | NOHEATCLOUD;
		explode center type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
	return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode thruster type BITMAPONLY | NOHEATCLOUD;
		explode center type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwing type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwing type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
