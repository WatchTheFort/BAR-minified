
#include "exptype.h"
//#define ARRAY_00_POW2_SIZE 6
//#include "../array_00.h"
#define ARRAY_01_POW2_SIZE 8
#include "../array_01.h"

piece  base, flare, turret, wake, sleeve, barrel;

static-var  Wobble_status, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1
#define SIGNAL_IDLE 8

#define HOVER_BASE base
#include "../bar_hovercraft_common.h"

#define BASEPIECE base
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

HoverIdle()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	while( TRUE )
	{
	    emit-sfx 1024 + 3 from wake;
	    sleep 1750;
	}
}

StartMoving()
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	signal SIGNAL_IDLE;
	var waketime;
	var bowtime;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from wake;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 30 ) waketime = 30;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
	signal SIGNAL_IDLE;
	start-script HoverIdle();
	return (0);
}

Create()
{
	hide flare;
	hide wake;
	hide flare;
	restore_delay = 3000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script BankControl();
	start-script WobbleUnit();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <170.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-6.000000] speed [1250.000000];
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [7.500000];
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
