#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, parts, track, turret, sleeve, lbarrel, lflare, rbarrel, rflare;

static-var  restore_delay, gun_1, fire_count;
static-var  last_primary_heading, last_primary_pitch;

// Signal definitions
#define SIG_AIM				2
#define SIG_FIRE1			4



#define BASEPIECE base
#define HITSPEED <85.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"


Create()
{
	hide lflare;
	hide rflare;
	gun_1 = 0;
	fire_count = 0;
	// set last headings and pitches to large negative numbers
	last_primary_heading = -1000000;
	last_primary_pitch = -1000000;
	restore_delay = 3000;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <50.005495>;
	// set last headings and pitches to large negative numbers
	last_primary_heading = -1000000;
	last_primary_pitch = -1000000;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	turn turret to y-axis heading speed <250.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <240.000000>;
	// if the turret cannot turn to its new heading in three frames, wait for turn
	if ( (get ABS(last_primary_heading - heading) > 4500) OR (get ABS(last_primary_pitch - pitch) > 4320) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	last_primary_heading = heading;
	last_primary_pitch = pitch;
	start-script RestoreAfterDelay();
	return (1);
}

Restorelbarrel()
{
	set-signal-mask 0;	//make sure shots from other barrel do not interrupt current barrel movement
	sleep 100;
	move lbarrel to z-axis [0.000000] speed [7.000000];
}

Restorerbarrel()
{
	set-signal-mask 0;	//make sure shots from other barrel do not interrupt current barrel movement
	sleep 100;
	move rbarrel to z-axis [0.000000] speed [7.000000];
}

Shot1(zero)
{
	signal SIG_FIRE1;
	set-signal-mask SIG_FIRE1;

	if(fire_count==0)
	{
		if( gun_1 == 0 )
		{
			move lbarrel to z-axis [-0.4666] now;
			emit-sfx 1024+0 from lflare;
		}
		if( gun_1 == 1 )
		{
			move rbarrel to z-axis [-0.4666] now;
			emit-sfx 1024 + 0 from rflare;
		}
	}
	if(fire_count==1)
	{
		if( gun_1 == 0 )
		{
			move lbarrel to z-axis [-0.9333] now;
			emit-sfx 1024+0 from lflare;
		}
		if( gun_1 == 1 )
		{
			move rbarrel to z-axis [-0.9333] now;
			emit-sfx 1024 + 0 from rflare;
		}
	}
	if(fire_count==2)
	{
		if( gun_1 == 0 )
		{
			move lbarrel to z-axis [-1.399994] now;
			emit-sfx 1024+0 from lflare;
			start-script Restorelbarrel();
		}
		if( gun_1 == 1 )
		{
			move rbarrel to z-axis [-1.399994] now;
			emit-sfx 1024 + 0 from rflare;
			start-script Restorerbarrel();
		}
	}
	sleep 32;
	++fire_count;
	if(fire_count>=3)
	{
		fire_count=0;
		gun_1 = !gun_1; // swap emit barrel at end of burst
	}
	return(1);
}

FirePrimary()
{
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = lflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = rflare;
	}
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode lbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lbarrel type FALL | NOHEATCLOUD;
		explode rbarrel type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode lbarrel type SMOKE | FALL | NOHEATCLOUD;
		explode rbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rbarrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
