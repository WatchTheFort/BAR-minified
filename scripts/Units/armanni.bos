
#include "exptype.h"

piece  base, doorl, door, post, turret, sleeve, barrel, dish, flare, antenna, light, aimfromy;

static-var  isOpen, restore_delay, statechg_DesiredState, statechg_StateChanging, shooting, shotcount;

// Signal definitions
#define SIGNAL_AIM1 256


activatescr()
{	
	if( TRUE )
	{
		turn doorl to z-axis <0> speed <90>;
		turn door to z-axis <0> speed <90>;
		sleep 1000;
	}
	if( TRUE )
	{
		move post to y-axis [0] speed [52];
		sleep 1000;
	}
	if( TRUE )
	{
		spin dish around y-axis speed <90>;
		move barrel to z-axis [0] speed [24];
		move light to z-axis [0] speed [16];
		turn antenna to x-axis <0> speed <90>;
		sleep 1000;
	}

	sleep 33;
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin dish around y-axis;
		turn turret to y-axis <0.000000> speed <100.000000>;
		turn sleeve to x-axis <0.000000> speed <100.000000>;
		move barrel to z-axis [-24] speed [24];
		move light to z-axis [-16] speed [16];
		turn antenna to x-axis <90> speed <90>;
		sleep 1000;
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
	}
	if( TRUE )
	{
		move post to y-axis [-52] speed [52];
		sleep 1000;
	}
	if( TRUE )
	{
		turn doorl to z-axis <-90> speed <90>;
		turn door to z-axis <90> speed <90>;
		sleep 1000;
	}
	sleep 33;
}

Go()
{

	set ARMORED to 0;
	if( !isOpen )
	{
		call-script activatescr();
	}
	isOpen = 1;
}

Stop()
{
	isOpen = 0;
	call-script deactivatescr();
	set ARMORED to 1;

}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare;


	isOpen = 1;
	call-script InitState();
	restore_delay = 3000;
	shooting = 0;
	shotcount = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	spin dish around y-axis speed <90>;
}

lua_UnitScriptLight(lightIndex, count)
{
	return 0;
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	signal SIGNAL_AIM1;
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

AimWeapon1(heading, pitch)
{
    if (shooting==1) {return(0);}
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	while( !isOpen )
	{
		sleep 150;
	}
	turn turret to y-axis heading speed <50.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FireWeapon1()
{
    shooting=1;
    shotcount = shotcount + 1;
    emit-sfx 1024 + 0 from flare;
    call-script lua_UnitScriptLight(1, shotcount);
	sleep 1400;
	shooting=0;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimfromy;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode antenna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type BITMAPONLY | NOHEATCLOUD;
		explode dish type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type BITMAPONLY | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode door type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FALL | NOHEATCLOUD;
		explode antenna type FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door type FALL | NOHEATCLOUD;
		explode doorl type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode antenna type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode door type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode post type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode antenna type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode light type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
