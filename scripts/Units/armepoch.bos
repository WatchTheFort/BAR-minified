
#include "exptype.h"

piece  ground, base, dish, wake, bow, engine,
       tur1, tur2, tur3, tur4, tur5, 
       sleeve1, sleeve2, sleeve3, sleeve4, sleeve5, 
       barrel1a, barrel1b, barrel2a, barrel2b, barrel2c, barrel3a, barrel3b, barrel4a, barrel4b, barrel4c, barrel5a, barrel5b, barrel5c,
       flare1a, flare1b, flare2a, flare2b, flare2c, flare3a, flare3b, flare4a, flare4b, flare4c, flare5a, flare5b, flare5c,
       turretmis1, turretmis2, misbox1, misbox2, misflare1, misflare2;

static-var  gun_1, gun_2, gun_3, gun_4, gun_5,
            gun_7, restore_delay, oldHead;

// Signal definitions
#define SIGNAL_MOVE 1


RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*2;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


#define BASEPIECE base
#define HITSPEED <10.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 15
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide engine;
	hide bow;
	hide wake;
	hide misflare1;
	hide misflare2;
	hide flare1a;
	hide flare1b;
	hide flare5a;
	hide flare5b;
	hide flare5c;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare4a;
	hide flare4b;
	hide flare4c;
	hide flare3a;
	hide flare3b;
	hide ground;
	set ARMORED to 1;
	hide flare1a;
	hide flare2a;
	hide flare3a;
	hide flare4a;
	hide flare5a;
	hide flare1b;
	hide flare2b;
	hide flare3b;
	hide flare4b;
	hide flare5b;
	hide flare2c;
	hide flare4c;
	hide flare5c;

	gun_1 = 0;
	gun_2 = 0;
	gun_3 = 0;
	gun_4 = 0;
	gun_5 = 0;
	gun_7 = 0;
	turn wake to y-axis <180> now;
	turn engine to y-axis <180> now;
	spin dish around y-axis speed <100.021978>;
	restore_delay = 6000;	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	turn misbox2 to x-axis <-25> speed <25.00000>;
	spin turretmis2 around y-axis speed <25.0>;
}

Stop()
{
	spin turretmis2 around y-axis speed <0.0>;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn tur2 to y-axis <0.000000> speed <50.000000>;
	turn sleeve2 to x-axis <0.000000> speed <30.000000>;
	turn tur4 to y-axis <0.000000> speed <50.000000>;
	turn sleeve4 to x-axis <0.000000> speed <30.000000>;
	turn tur5 to y-axis <0.000000> speed <50.000000>;
	turn sleeve5 to x-axis <0.000000> speed <30.000000>;
	turn misbox2 to x-axis <-25> speed <25.00000>;
	spin turretmis2 around y-axis speed <25.0>;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn tur1 to y-axis <0.000000> speed <10.000000>;
	turn sleeve1 to x-axis <0.000000> speed <10.000000>;
	turn tur3 to y-axis <0.000000> speed <10.000000>;
	turn sleeve3 to x-axis <0.000000> speed <10.000000>;
	turn misbox2 to x-axis <-25> speed <25.00000>;
	spin turretmis2 around y-axis speed <25.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (Stunned) {
	    call-script Stop();
	} else {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn turretmis1 to y-axis <0.000000> speed <80.000000>;
	turn misbox1 to x-axis <0.000000> speed <50.000000>;
	turn turretmis2 to y-axis <0.000000> speed <80.000000>;
	turn misbox2 to x-axis <-25> speed <25.00000>;
	spin turretmis2 around y-axis speed <25.0>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime  = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 3 from wake;
		if (bowtime) emit-sfx 1024 + 4 from bow;
		bowtime = !bowtime;
		emit-sfx 1024 + 5 from engine;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

AimWeapon1(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	turn tur1 to y-axis heading speed <50.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn tur1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( gun_1 )
	{
	    emit-sfx 1024 + 1 from flare1b;
		move barrel1b to z-axis [-3.000000] speed [500.000000];
		sleep 100;
		move barrel1b to z-axis [0.000000] speed [3.000000];
	}
	else
	{
	    emit-sfx 1024 + 1 from flare1a;
		move barrel1a to z-axis [-3.000000] speed [500.000000];
		sleep 100;
		move barrel1a to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = tur1;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1a + gun_1;
}

AimWeapon2(heading, pitch)
{
	signal 4;
	set-signal-mask 4;
	turn tur2 to y-axis heading speed <90.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn tur2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon2()
{
	if( gun_2 == 0 )
	{
	    emit-sfx 1024 + 0 from flare2a;
		move barrel2a to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel2a to z-axis [0.000000] speed [3.000000];
	}
	else if( gun_2 == 1 )
	{
	    emit-sfx 1024 + 0 from flare2b;
		move barrel2b to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel2b to z-axis [0.000000] speed [3.000000];
	}
	else
	{
	    emit-sfx 1024 + 0 from flare2c;
		move barrel2c to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel2c to z-axis [0.000000] speed [3.000000];
	}
	++gun_2;
	if( gun_2 >= 3 )
	{
		gun_2 = 0;
	}
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = tur2;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare2a + gun_2;
}

AimWeapon3(heading, pitch)
{
	signal 8;
	set-signal-mask 8;
	turn tur3 to y-axis heading speed <50.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn tur3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	if( gun_3 )
	{
	    emit-sfx 1024 + 1 from flare3b;
		move barrel3b to z-axis [-3.000000] speed [500.000000];
		sleep 100;
		move barrel3b to z-axis [0.000000] speed [3.000000];
	}
	else
	{
	    emit-sfx 1024 + 1 from flare3a;
		move barrel3a to z-axis [-3.000000] speed [500.000000];
		sleep 100;
		move barrel3a to z-axis [0.000000] speed [3.000000];
	}
	gun_3 = !gun_3;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = tur3;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = flare3a + gun_3;
}

AimWeapon4(heading, pitch)
{
	signal 16;
	set-signal-mask 16;
	turn tur4 to y-axis heading speed <90.000000>;
	turn sleeve4 to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn tur4 around y-axis;
	wait-for-turn sleeve4 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon4()
{
	if( gun_4 == 0 )
	{
	    emit-sfx 1024 + 0 from flare4a;
		move barrel4a to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel4a to z-axis [0.000000] speed [3.000000];
	}
	else if( gun_4 == 1 )
	{
	    emit-sfx 1024 + 0 from flare4b;
		move barrel4b to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel4b to z-axis [0.000000] speed [3.000000];
	}
	else
	{
	    emit-sfx 1024 + 0 from flare4c;
		move barrel4c to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel4c to z-axis [0.000000] speed [3.000000];
	}
	++gun_4;
	if( gun_4 >= 3 )
	{
		gun_4 = 0;
	}
}

AimFromWeapon4(pieceIndex)
{
	pieceIndex = tur4;
}

QueryWeapon4(pieceIndex)
{
	pieceIndex = flare4a + gun_4;
}

AimWeapon5(heading, pitch)
{
	signal 32;
	set-signal-mask 32;
	turn tur5 to y-axis heading speed <90.000000>;
	turn sleeve5 to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn tur5 around y-axis;
	wait-for-turn sleeve5 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon5()
{
	if( gun_5 == 0 )
	{
	    emit-sfx 1024 + 0 from flare5a;
		move barrel5a to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel5a to z-axis [0.000000] speed [3.000000];
	}
	else if( gun_5 == 1 )
	{
	    emit-sfx 1024 + 0 from flare5b;
		move barrel5b to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel5b to z-axis [0.000000] speed [3.000000];
	}
	else
	{
	    emit-sfx 1024 + 0 from flare5c;
		move barrel5c to z-axis [-1.000000] speed [500.000000];
		sleep 100;
		move barrel5c to z-axis [0.000000] speed [3.000000];
	}
	++gun_5;
	if( gun_5 >= 3 )
	{
		gun_5 = 0;
	}
}

AimFromWeapon5(pieceIndex)
{
	pieceIndex = tur5;
}

QueryWeapon5(pieceIndex)
{
	pieceIndex = flare5a + gun_5;
}

AimWeapon6(heading, pitch)
{
	signal 64;
	set-signal-mask 64;
	turn turretmis1 to y-axis heading speed <250.000000>;
	turn misbox1 to x-axis <0> - pitch speed <200.000000>;
	wait-for-turn turretmis1 around y-axis;
	wait-for-turn misbox1 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireWeapon6()
{
	emit-sfx 1024 + 2 from misflare1;	
}

AimFromWeapon6(pieceIndex)
{
	pieceIndex = misflare1;
}

QueryWeapon6(pieceIndex)
{
	pieceIndex = misflare1;
}

AimWeapon7(heading, pitch)
{
	signal 128;
	set-signal-mask 128;
	turn turretmis2 to y-axis heading speed <250.000000>;
	turn misbox2 to x-axis <0> - pitch speed <200.000000>;
	wait-for-turn turretmis2 around y-axis;
	wait-for-turn misbox2 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FireWeapon7()
{
	if( gun_7 )
	{
	    emit-sfx 1024 + 2 from misflare2;
	}
//	else
//	{
//	    emit-sfx 1024 + 2 from misflare2;
//	}
	gun_7 = !gun_7;
}

AimFromWeapon7(pieceIndex)
{
	pieceIndex = turretmis2;
}

QueryWeapon7(pieceIndex)
{
	pieceIndex = misflare2 + gun_7;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tur3 type BITMAPONLY | NOHEATCLOUD;
		explode sleeve3 type BITMAPONLY | NOHEATCLOUD;
		explode barrel3b type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3b type BITMAPONLY | NOHEATCLOUD;
		explode barrel3a type BITMAPONLY | NOHEATCLOUD;
		explode dish type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tur3 type FALL | NOHEATCLOUD;
		explode sleeve3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel3b type FALL | NOHEATCLOUD;
		explode flare3b type FALL | NOHEATCLOUD;
		explode barrel3a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tur3 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve3 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel3b type SMOKE | FALL | NOHEATCLOUD;
		explode flare3b type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel3a type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tur3 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve3 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel3b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare3b type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel3a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare3a type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode dish type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
