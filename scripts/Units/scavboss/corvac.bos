
#include "../../recoil_common_includes.h"

piece  base, tracks, attach, emitnano;

static-var  restore_delay, nano_heading;
static-var open_state;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_BUILD 2

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#include "../../unit_hitbyweaponid_and_smoke.h"

Create()
{
	restore_delay = 3000;
	open_state = 0;
	nano_heading = 0;
	return (0);
}

static-var  Stunned;
SetStunned(State)
{
  Stunned = State;
	if (!Stunned) {
		//start-script Restore_Nano();
	}
}


StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;
	nano_heading = heading;
	if (heading > 0) {
		move emitnano to x-axis [-11.75] now;
	}
	else {
		move emitnano to x-axis [11.75] now;
	}
	set INBUILDSTANCE to 1;
	//get PRINT(get GAME_FRAME, heading, heading, heading);
	//start-script Deploy_Nano(heading);
}

StopBuilding()
{
	//signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;
	//start-script Restore_Nano();
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = emitnano;
}




Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tracks type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tracks type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
	explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	explode tracks type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
