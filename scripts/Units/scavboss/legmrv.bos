#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, steer, turret, fwheel, bwheel, gunr, sleever, barrelr, flarer, gunr2, sleever2, barrelr2, flarer2,
		gunl, sleevel, barrell, flarel, gunl2, sleevel2, barrell2, flarel2;

static-var  restore_delay, moveSpeed, wheelSpeed, Static_Var_1, gun_1, gun_2, statechg_DesiredState, 
			statechg_StateChanging, oldHeading;

// Signal definitions
#define SIG_MOVE 			2
#define SIG_AIM				4
#define SIG_FIRE1			8

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.005495>;
	turn base to z-axis <0> - anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}

Steering(heading, steery, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*3;
		turn steer to y-axis steery speed <180>;		
		currentSpeed = <2.5> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin fwheel around x-axis speed currentSpeed;
		spin bwheel around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

//#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flarer;
	hide flarer2;
	hide flarel;
	hide flarel2;
	Static_Var_1 = 0;
	gun_1 = 0;
	gun_2 = 0;
	oldheading = get HEADING;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

StartMoving()
{
    start-script Steering();
}

StopMoving()
{
    signal SIG_MOVE;
    stop-spin fwheel around x-axis;
    stop-spin bwheel around x-axis;
}

//following block returns weapon in straight position after firing

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 4000;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
   if (Stunned) {
       return (1);
    }
	gun_1 = 0;
	gun_2 = 0;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn gunr to x-axis <0.000000> speed <50.000000>;
	turn gunl to x-axis <0.000000> speed <50.000000>;
 }
 
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	turn gunr to x-axis <0.000000> - pitch speed <200.000000>;
	turn gunl to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gunr around x-axis;
	start-script RestoreAfterDelay();
	//while( gun_2 )
	//{
	//	wait-for-move barrelr along z-axis;
	//	wait-for-move barrelr2 along z-axis;
	//	wait-for-move barrell along z-axis;
	//	wait-for-move barrell2 along z-axis;
	//	gun_2 = 0;
	//	gun_1 = 0;
	//	return (0);
	//}
	return (1);
}

FirePrimary()
{
	return (1);
}

Shot1(zero)
{
	signal SIG_FIRE1;
	set-signal-mask SIG_FIRE1;
	if (gun_1 == 0){
		move barrelr to z-axis [-3] now;
		move barrelr to z-axis [0] speed [1];
	}
	if (gun_1 == 1){
		move barrelr2 to z-axis [-3] now;
		move barrelr2 to z-axis [0] speed [1];
	}
	if (gun_1 == 2){
		move barrell to z-axis [-3] now;
		move barrell to z-axis [0] speed [1];
	}
	if (gun_1 == 3){
		gun_2 = 1;
		move barrell2 to z-axis [-3] now;
		move barrell2 to z-axis [0] speed [1];
	}
	++gun_1;
	if(gun_1>=4)
	{
		gun_1=0;
	}
	return(1);
}

AimFromPrimary(piecenum)
{
	if (gun_1 == 0 or gun_1 == 1){
		piecenum = gunr;
	}
	if (gun_1 >= 2){
		piecenum = gunl;
	}
	return (0);
}

QueryPrimary(piecenum)
{
	if (gun_1 <= 1){
		piecenum = flarer;
	}
	if (gun_1 == 2){
		piecenum = flarer2;
	}
	if (gun_1 == 3){
		piecenum = flarel;
	}
	if (gun_1 >= 4){
		piecenum = flarel2;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gunr type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode fwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gunr type FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gunr type SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gunr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
