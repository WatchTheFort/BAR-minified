
#include "../../recoil_common_includes.h"

piece  base, turret1, turret2, abarrela, abarrelb, bbarrela, bbarrelb, flare11,
       flare12, flare21, flare22, wake1, flare3;

static-var  gun_1, gun_2, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1


#define RB_MASS 20
#define RB_LENGTH 8
#define RB_WIDTH 4
#define RB_PITCH_ACCELERATION 10
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_2 500
#define RB_WAKE_PIECE wake1
#define RB_WAKE_CEG 2
#define RB_IDLE_KICK 50000

#include "../../bar_ships_common.h"

Create()
{
	hide flare3;
	hide wake1;
	hide flare12;
	hide flare11;
	hide flare22;
	hide flare21;
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	gun_1 = turret1;
	gun_2 = turret1;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret1 to y-axis <0.> speed <45.>;
	turn turret2 to y-axis <0.> speed <45.>;
	turn turret1 to x-axis <0.> speed <25.>;
	turn turret2 to x-axis <0.> speed <25.>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving(reversing)
{

}

StopMoving()
{

}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret1 to y-axis heading speed <45.>;
	turn turret1 to x-axis <0.> - pitch speed <25.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( gun_1)
	{
		move abarrelb to z-axis [-1.] speed [500.];
		wait-for-move abarrelb along z-axis;
		move abarrelb to z-axis [0.] speed [5.];
	}
	else
	{
		move abarrela to z-axis [-1.] speed [500.];
		wait-for-move abarrela along z-axis;
		move abarrela to z-axis [0.] speed [5.];

	}
	gun_1 = !gun_1;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret1;
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn turret2 to y-axis heading speed <45.>;
	turn turret2 to x-axis <0.> - pitch speed <25.>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	if( gun_2 )
	{
		move bbarrelb to z-axis [-1.] speed [500.];
		wait-for-move bbarrelb along z-axis;
		move bbarrelb to z-axis [0.] speed [5.];
	}
	else
	{
		move bbarrela to z-axis [-1.] speed [500.];
		wait-for-move bbarrela along z-axis;
		move bbarrela to z-axis [0.] speed [5.];
	}
	gun_2 = !gun_2;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = turret2;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare11 + gun_1;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare21 + gun_2;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode bbarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrelb type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare21 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrelb type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type SMOKE | FALL | NOHEATCLOUD;
		explode bbarrela type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare21 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode bbarrela type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare21 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bbarrelb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
