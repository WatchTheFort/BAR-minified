
#include "../../recoil_common_includes.h"

piece  flarel, flarer, flareaa, turretaa, ground, base, turretl, turretr, plungerl, plungerr;

static-var  restore_delay, oldHead;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3 1024


#define RB_MASS 20
#define RB_LENGTH 5
#define RB_WIDTH 3
#define RB_PITCH_SPEED 200
#define RB_PITCH_ACCELERATION 20
#define RB_ROLL_ACCELERATION 8
#define RB_RECOIL_ENERGY_2 500
#define RB_WAKE_PIECE ground
#define RB_WAKE_CEG 2
#define RB_IDLE_KICK 10000

#include "../../bar_ships_common.h"


Create()
{
	hide flarel;
	hide flarer;
	hide flareaa;
	hide ground;
	restore_delay = 3000;
	start-script InitRockBoat();
	SLEEP_UNTIL_UNITFINISHED;
	start-script BoatPhysics();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turretl to y-axis <0.0> speed <150.0>;
	turn turretr to y-axis <0.0> speed <150.0>;
	turn turretaa to y-axis <0.0> speed <150.0>;
	wait-for-turn turretaa around y-axis;
	move turretaa to y-axis [0] speed [16];
	sleep(150);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}


StartMoving(reversing)
{

}

StopMoving()
{

}

AimWeapon3(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	move turretaa to y-axis [4] speed [16];
	turn turretaa to y-axis heading speed <300>;
	wait-for-turn turretaa around y-axis;
	start-script RestoreAfterDelay();
	return(1);
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = turretaa;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = flareaa;
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turretl to y-axis heading speed <300.0>;
	wait-for-turn turretl around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn turretr to y-axis heading speed <300.0>;
	wait-for-turn turretr around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	move plungerl to z-axis [5.0]  now;
	sleep 25;
	move plungerl to z-axis [0.0] speed [10.0];
}

FireWeapon2()
{
	move plungerr to z-axis [5.0]  now;
	sleep 25;
	move plungerr to z-axis [0.0] speed [10.0];
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turretl;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = turretr;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flarel;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flarer;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretaa type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretaa type FALL | NOHEATCLOUD;
		explode turretl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type SMOKE | FALL | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretaa type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretaa type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
