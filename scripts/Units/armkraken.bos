#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, r1arm, r2arm, l1arm, l2arm, rcannon1, rcannon2, lcannon1, lcannon2, rflare1, rflare2, lflare1, lflare2;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


Create()
{
	hide rflare1;
	hide rflare2;
	hide lflare1;
	hide lflare2;
	gun_1 = 0;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <150.000000>;
	turn turret to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 + 0 from rflare1;
		move rcannon1 to z-axis [-12.000000] speed [60.000000];
		sleep 120;
		move rcannon1 to z-axis [0.000000] speed [20.000000];
		gun_1 = 1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 + 0 from lflare1;
		move lcannon1 to z-axis [-12.000000] speed [60.000000];
		sleep 120;
		move lcannon1 to z-axis [0.000000] speed [20.000000];
		gun_1 = 2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		emit-sfx 1024 + 0 from rflare2;
		move rcannon2 to z-axis [-12.000000] speed [60.000000];
		sleep 120;
		move rcannon2 to z-axis [0.000000] speed [20.000000];
		gun_1 = 3;
		return (0);
	}
	if( gun_1 == 3 )
	{
		emit-sfx 1024 + 0 from lflare2;
		move lcannon2 to z-axis [-12.000000] speed [60.000000];
		sleep 120;
		move lcannon2 to z-axis [0.000000] speed [20.000000];
		gun_1 = 0;
		return (0);
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare1;
	}
	if( gun_1 == 2 )
	{
		piecenum = rflare2;
	}
	if( gun_1 == 3 )
	{
		piecenum = lflare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode rcannon1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rcannon2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lcannon1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lcannon2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare1 type BITMAPONLY | NOHEATCLOUD;
		explode lflare2 type BITMAPONLY | NOHEATCLOUD;
		explode rflare1 type BITMAPONLY | NOHEATCLOUD;
		explode rflare2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode rcannon1 type FALL | NOHEATCLOUD;
		explode rcannon2 type FALL | NOHEATCLOUD;
		explode lcannon1 type FALL | NOHEATCLOUD;
		explode lcannon2 type FALL | NOHEATCLOUD;
		explode rflare1 type FALL | NOHEATCLOUD;
		explode rflare2 type FALL | NOHEATCLOUD;
		explode lflare1 type FALL | NOHEATCLOUD;
		explode lflare2 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode rcannon1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rcannon2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lcannon1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode lcannon2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode rflare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rflare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rcannon1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rcannon2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lcannon1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lcannon2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rflare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rflare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lflare2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return corpsetype;
}
