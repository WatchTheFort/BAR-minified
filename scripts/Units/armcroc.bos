#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel, flare, sleeve, head, tail, aflare, aturret, abarrel, launcher, asleeve;

static-var  restore_delay, Static_Var_2, bMoving, gun_2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4



RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
	return (0);
}


#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

EmitSFX()
{
	while( TRUE )
	{
		if( bMoving )
		{
			if( Static_Var_2 == 3 )//does ... anything ever trip this?
			{
				emit-sfx 259 from base;
			}
		}
		sleep 250;
	}
}

Create()
{
	hide flare;
	hide flare;
	hide aflare;
	hide aflare;
	
//	turn aturret to y-axis <-180> speed <500>;
	
	Static_Var_2 = 4;
	bMoving = FALSE;
	restore_delay = 3000;
	start-script EmitSFX();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn sleeve to x-axis <0.000000> speed <30.000000>;
	move barrel to z-axis [-4.000000] speed [12.000000];
	move turret to y-axis [0] speed [8];
	
	//turn launcher to x-axis <0> speed <25.00000>;
	//spin aturret around y-axis speed <25.0>;
	//move aturret to y-axis [18.5] speed [100];
	//move launcher to y-axis [0] speed [100];

	turn launcher to x-axis <0.000000> speed <100.000000>;
	turn aturret to y-axis <0> speed <70>;
	wait-for-turn aturret around y-axis;
	wait-for-turn launcher around x-axis;
	move aturret to y-axis [0] speed [70];
	move launcher to y-axis [0] speed [70];
	
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	move turret to y-axis [6] speed [20];
	wait-for-move turret along y-axis;
	turn turret to y-axis heading speed <90.000000>;
	move barrel to z-axis [0.000000] speed [8.000000];
	turn sleeve to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-2.400000] speed [500.000000];
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [3.000000];
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}









AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	
	move aturret to y-axis [15] speed [100];
	move launcher to y-axis [4.5] speed [100];
	turn launcher to x-axis <90.000000> speed <200.000000>;
	
	if( gun_2 == 1 )
	{
		turn asleeve to y-axis <0.000000> speed <400.000000>;
	}
	if( gun_2 == 2 )
	{
		turn asleeve to y-axis <120.027473> speed <400.000000>;
	}
	if( gun_2 == 3 )
	{
		turn asleeve to y-axis <-120.027473> speed <400.000000>;
	}
	turn aturret to y-axis <180> + heading speed <450.000000>;
	turn launcher to x-axis <90.000000> + pitch speed <450.000000>;
	wait-for-turn asleeve around z-axis;
	wait-for-turn aturret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	gun_2 = aflare;//why would it ever not be this?
	++gun_2;
	if( gun_2 == 4 )
	{
		gun_2 = aflare;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = aturret;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = aflare;
	return (0);
}




SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		//explode sleeve type BITMAPONLY | NOHEATCLOUD;
		//explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		//explode tail type BITMAPONLY | NOHEATCLOUD;
		explode head type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode tail type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		//explode sleeve type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode tail type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode tail type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode head type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
