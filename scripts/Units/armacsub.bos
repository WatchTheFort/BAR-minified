
#include "../recoil_common_includes.h"

piece  base, rfin, lfin, door, prop, turret, gun, nano1, nano2;

static-var  moveSpeed, currentSpeed;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

Propcontrol()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*1000/moveSpeed;
		spin prop around z-axis speed <1.0>*currentSpeed accelerate <10.0>;
		sleep 33;
	}
}

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 100

#define SMOKEPROBABILITY 0
#include "../unit_hitbyweaponid_and_smoke.h"

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	move door to y-axis [1.0] speed [4.0];
	move lfin to x-axis [-5.600000] speed [5.600000];
	move rfin to x-axis [5.600000] speed [5.600000];
	while( TRUE )
	{
		emit-sfx 259 from prop;
		sleep 250;
	}
}

StopMoving()
{	
	signal SIGNAL_MOVE;
	move door to y-axis [0.0] speed [4.0];
	move lfin to x-axis [0.0] speed [5.600000];
	move rfin to x-axis [0.0] speed [5.600000];

}


Create()
{
	hide nano1;
	hide nano2;
	moveSpeed = get MAX_SPEED;
	start-script Propcontrol();
}

Activate()
{
}

Deactivate()
{
}

StartBuilding(heading, pitch)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	move turret to y-axis [4.400000] speed [8.800000];
	wait-for-move turret along y-axis;

	turn gun to y-axis heading speed <160>;
	wait-for-turn gun around y-axis;

	show nano1;
	show nano2;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	hide nano1;
	hide nano2;

	sleep 6000;
	
	set INBUILDSTANCE to 0;
	turn gun to y-axis <0.0> speed <160>;
	wait-for-turn gun around y-axis;
	move turret to y-axis [0.0] speed [8.800000];
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nano1;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type BITMAPONLY | NOHEATCLOUD;
		explode door type BITMAPONLY | NOHEATCLOUD;
		explode prop type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode prop type FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode prop type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		explode gun type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode rfin type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode prop type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
