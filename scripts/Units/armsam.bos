
#include "exptype.h"

piece  flare1, flare2, base, turret, lwheel,rwheel, mlauncher;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256

#define BASEPIECE base
#define HITSPEED <75.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100
#define RECOIL_POWER 5000
#include "../unit_hitbyweaponid_and_smoke.h"

#define TB_BASE base 
#define TB_TURNRATE <15.0> 
#define TB_TILT_X <0.10>
#define TB_BANK_Z <0.10> // Do not define this if you dont want banking
#include "../tilt_bank_mobileunit.h"


Create()
{
	hide flare1;
	hide flare2;
	gun_1 = flare1;
	restore_delay = 3000;
	call-script TB_Init();
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <90.021978>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <250.060440>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	gun_1 = !gun_1;
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = mlauncher;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = gun_1;
}


StartMoving(reversing)
{
	spin lwheel around x-axis speed <150> accelerate <15>;
	spin rwheel around x-axis speed <150> accelerate <15>;
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;

	START_TILTBANK;
}
StopMoving()
{
	stop-spin rwheel around x-axis;
	stop-spin lwheel around x-axis;
	
	signal SIGNAL_MOVE;
	STOP_TILTBANK;
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type BITMAPONLY | NOHEATCLOUD;
		explode lwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode rwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwheel type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode lwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode lwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
