
#include "exptype.h"

piece  base, column, turret, barrel1, barrel2, flare1, flare2;

static-var  Static_Var_1, restore_delay, Static_Var_3, Static_Var_4, Static_Var_5,
            gun_1, Static_Var_7, Static_Var_8, statechg_DesiredState, statechg_StateChanging,
            Stunned;

// Signal definitions
#define SIGNAL_AIM1 256


Go()
{
	if (Stunned) {
		return (0);
	}
	spin column around y-axis speed Static_Var_3 accelerate Static_Var_4;
}

Stop()
{
	stop-spin column around y-axis decelerate Static_Var_5;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flare1;
	hide flare2;
	Static_Var_3 = 0;
	Static_Var_4 = 91;
	Static_Var_5 = 182;
	Static_Var_7 = 0;
	Static_Var_8 = 0;
	gun_1 = 0;
	Static_Var_1 = 1;
	call-script InitState();
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 8;
}

ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script RequestState(1);
}
SetStunned(State)
{
	Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
	if (State) {
	    call-script Stop();
	}else{
	    if (statechg_DesiredState == 0) {
	        call-script Go();
	    }
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

SetSpeed(windOrMetal)
{
	Static_Var_3 = windOrMetal * 45;
	Static_Var_7 = windOrMetal * 400;
	Static_Var_8 = windOrMetal * 400;
}



AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed Static_Var_7;
	turn turret to x-axis <0.000000> - pitch speed Static_Var_8;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	return (1);
}

FireWeapon1()
{
	gun_1 = ! gun_1;
}

QueryWeapon1(pieceIndex)
{
	if( gun_1 == 0 )
	{
		pieceIndex = flare1;
	}
	if( gun_1 == 1 )
	{
		pieceIndex = flare2;
	}
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type BITMAPONLY | NOHEATCLOUD;
		explode column type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode column type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode column type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode column type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
