#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, flare, barrel, fwh, bwh;

static-var  restore_delay, currentSpeed, moveSpeed, wheelSpeed;

// Signal definitions
#define SIG_AIM				2

WheelControl()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		wheelSpeed = currentSpeed * 2; //original speed 7
		if (currentSpeed<2) currentSpeed=2;	// prevent infinite timing
		spin fwh around x-axis speed  (<1>*wheelSpeed) * currentSpeed;         //(<1.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
		spin bwh around x-axis speed  (<0.8>*wheelSpeed) * currentSpeed;				//(<0.5.000000> * wheelSpeed ) * 2 accelerate <5.000000> * currentSpeed;
		sleep 98; //200
	}
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

#define BASEPIECE base
#define HITSPEED <85.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare;
	restore_delay = 3000;
	moveSpeed = get MAX_SPEED;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script WheelControl();
}


SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <90.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flare;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode fwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode bwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		//explode fwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode bwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		//explode fwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode bwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		//explode fwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode bwh type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
