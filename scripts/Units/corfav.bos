
#include "exptype.h"

piece  base, rdrbar, rdrdish, steer, turret, fwheel, bwheel, gun, flare;

static-var  restore_delay, moveSpeed, wheelSpeed, gun_2, statechg_DesiredState, statechg_StateChanging,
			oldHeading, dishturn, wpn1_lasthead;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_AIM1 256

Steering(heading, steery, currentSpeed)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	while(1)
	{
		heading = get HEADING;
		steery = (heading - oldheading)*3;
		turn steer to y-axis steery speed <120>;		
		currentSpeed = <5.5> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin fwheel around x-axis speed currentSpeed;
		spin bwheel around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}



#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

//#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare;
	dishturn = 1;
	oldheading = get HEADING;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	hide flare;
	turn rdrbar to x-axis <-15> now;
}




StartMoving()
{
    dishturn = 0;
    start-script Steering();
}

TurnTheDish()
{
    while (dishturn){
        turn rdrdish to y-axis <-30> speed <30>;
        wait-for-turn rdrdish around y-axis;
        turn rdrdish to y-axis <30> speed <30>;
        wait-for-turn rdrdish around y-axis;
    }
    turn rdrdish to y-axis <0> speed <30>;
}

StopMoving()
{
    signal SIGNAL_MOVE;
    stop-spin fwheel around x-axis;
    stop-spin bwheel around x-axis;
    dishturn = 1;
    start-script TurnTheDish();
}




//following block returns weapon in straight position after firing

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
   if (Stunned) {
       return (1);
    }
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <50.000000>;
	wait-for-turn turret around y-axis;
	wpn1_lasthead = 1000000;
 }
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <300.000000>;
	turn gun to x-axis <0.000000> - pitch speed <300.000000>;
	if (((get ABS(wpn1_lasthead - heading)) > 65536) OR(((get ABS(wpn1_lasthead - heading)) > 1300) AND ((get ABS(wpn1_lasthead - heading)) < 64236)))
	{
		wpn1_lasthead = 1000000;
		wait-for-turn turret around y-axis;
	}
	wpn1_lasthead = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = gun;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode fwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode gun type FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode gun type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode fwheel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bwheel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
