#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, sleeve, rtbarrel, ltbarrel, lempslv, lempbarrel, rempslv, rempbarrel, rlauncher,
flare1, flare2, flare3, flare4, flare5, flare7;

static-var  moveSpeed, currentSpeed, animSpeed, restore_delay, currentBarrel, currentLauncher;

static-var last_lempslv_heading,last_rempslv_heading,last_tesla_heading,last_tesla_pitch;

#define SIG_MOVE 1
#define SIG_AIM_1			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED) * 20 / moveSpeed;
		if (currentSpeed < 4) currentSpeed = 4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}

#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	hide flare7;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	currentBarrel = 0;
	currentLauncher = 0;
	restore_delay = 3000;
	//large negative values to let wait-for-turn happen on first target
	last_lempslv_heading = -1000000;
	last_rempslv_heading = -1000000;
	last_tesla_heading = -1000000;
	last_tesla_pitch = -1000000;
}

StartMoving()
{
  signal SIG_MOVE;
  set-signal-mask SIG_MOVE;
	start-script UnitSpeed();
}

StopMoving()
{
  signal SIG_MOVE;
}

SetMaxReloadTime(time)
{
	restore_delay = time * 2;
}

static-var  Stunned;
// Stun logic needs to be looked at, the restore is usually set to unstoppable mask 0,
// which can cause problems if the unit gets a target while doing the restore animation
// not relevant for unparalyzable thor, but might be needed for other units
SetStunned(State)
{
    Stunned = State;
	if (!Stunned)
	{
		start-script RestoreAfterDelay_tesla();
		start-script RestoreAfterDelay_EMP_missile();
		start-script RestoreAfterDelay_lEMP();
		start-script RestoreAfterDelay_rEMP();
	}
}

RestoreAfterDelay_tesla()
{
	set-signal-mask SIG_AIM_1; //ensures restore animation is killed if this weapon is aimed
	sleep restore_delay;
	//large negative values to let wait-for-turn happen on first target
	last_tesla_heading = -1000000;
	last_tesla_pitch = -1000000;
	turn turret to y-axis <0.000000> speed <45>;
	turn sleeve to x-axis <0.000000> speed <15.000000>;
}

RestoreAfterDelay_EMP_missile()
{
	set-signal-mask SIG_AIM_2; //ensures restore animation is killed if this weapon is aimed
	sleep 6000; // allows the emp missile to be deployed for 6 seconds, can be adjusted for balance reasons
	turn rlauncher to x-axis <0> speed <30>;
}

RestoreAfterDelay_lEMP()
{
	set-signal-mask SIG_AIM_3; //ensures restore animation is killed if this weapon is aimed
	sleep restore_delay;
	//large negative values to let wait-for-turn happen on first target
	last_lempslv_heading = -1000000;
	turn lempslv to y-axis <0> speed <90>;
}

RestoreAfterDelay_rEMP()
{
	set-signal-mask SIG_AIM_4; //ensures restore animation is killed if this weapon is aimed
	sleep restore_delay;
	//large negative values to let wait-for-turn happen on first target
	last_lempslv_heading = -1000000;
	turn rempslv to y-axis <0> speed <90>;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

//Weapon 1: Double Heavy Tesla Cannon
//===================================
AimWeapon1(heading, pitch)
{
	signal SIG_AIM_1;
	set-signal-mask SIG_AIM_1;
	turn turret to y-axis heading speed <45.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	last_tesla_heading = heading;
	last_tesla_pitch = pitch;
	start-script RestoreAfterDelay_tesla();
	return (1);
}

Rock_Main_Cannon()
{
	turn base to z-axis <0> - (GET KSIN(last_tesla_heading)) speed <50.005495>;
	turn base to x-axis <0> - (GET KCOS(last_tesla_heading)) speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

FireWeapon1()
{
	start-script Rock_Main_Cannon();
	if( currentBarrel == 0 )
	{
		move ltbarrel to z-axis [-2.400000] speed [500.000000];
		spin ltbarrel around z-axis speed <360> accelerate <120>;
		emit-sfx 1024 + 0 from flare2;
		sleep 100;
		wait-for-move ltbarrel along z-axis;
		move ltbarrel to z-axis [0.000000] speed [3.000000];
		wait-for-move ltbarrel along z-axis;
		stop-spin ltbarrel around z-axis decelerate <15>;
	}
	if( currentBarrel == 1 )
	{
		move rtbarrel to z-axis [-2.400000] speed [500.000000];
		spin rtbarrel around z-axis speed <360> accelerate <120>;
		emit-sfx 1024 + 0 from flare1;
		sleep 100;
		wait-for-move rtbarrel along z-axis;
		move rtbarrel to z-axis [0.000000] speed [3.000000];
		wait-for-move rtbarrel along z-axis;
		stop-spin rtbarrel around z-axis decelerate <15>;
	}
	currentBarrel = !currentBarrel;
}

AimFromWeapon1(piecenum)
{
	piecenum = sleeve;
}

QueryWeapon1(piecenum)
{
	if (currentBarrel) piecenum = flare1;
	if (!currentBarrel) piecenum = flare2;
}

//Weapon 2: EMP Missile Launcher
//===================================
AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn rlauncher to x-axis <0.000000> - <90.0> speed <30.000000>;
	wait-for-turn rlauncher around x-axis;
	start-script RestoreAfterDelay_EMP_missile();
	return (1);
}

FireWeapon2()
{
	if( currentLauncher == 0 )
	{
		emit-sfx 1024 + 0 from flare4;
		sleep 100;
	}
	if( currentLauncher == 1 )
	{
		emit-sfx 1024 + 0 from flare3;
		sleep 100;
	}
	currentLauncher = !currentLauncher;
}

AimFromWeapon2(piecenum)
{
	if (currentLauncher) piecenum = flare3;
	if (!currentLauncher) piecenum = flare4;
}

QueryWeapon2(piecenum)
{
	if (currentLauncher) piecenum = flare3;
	if (!currentLauncher) piecenum = flare4;
}

//Weapon 3: Left EMP
//===================================
AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	
	// logic to restrict turret rotation due to unitdef maxangledif
	// maxangledif=180 = 0 to 180 degrees = 0 to 32,768
	// does no turn animation if the target heading is out of firing arc
	// out of firing arc aim calls happen during "preaiming" logic
	if ( (heading<0) )
	{
		return (0);
	}
	
	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	turn lempslv to y-axis heading speed <120>;
	// if weapon will take more than 1 frame to turn to new angle, wait for turn
	if ( (get ABS(last_lempslv_heading-heading)>720) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn lempslv around y-axis;
	}
	last_lempslv_heading=heading;
	start-script RestoreAfterDelay_lEMP();
	return (1);
}

FireWeapon3()
{
	move lempbarrel to z-axis [-1.00000] speed [100.000000];
	emit-sfx 1024 + 0 from flare5;
	sleep 100;
	wait-for-move lempbarrel along z-axis;
	move lempbarrel to z-axis [0.000000] speed [3.000000];
	wait-for-move lempbarrel along z-axis;
}

AimFromWeapon3(piecenum)
{
	piecenum = lempslv;
}

QueryWeapon3(piecenum)
{
	piecenum = flare5;
}

//Weapon 3: Right EMP
//===================================
AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	
	// logic to restrict turret rotation due to unitdef maxangledif
	// maxangledif=180 = -180 to 0 degrees = -32,768 to 0
	// does no turn animation if the target heading is out of firing arc
	// out of firing arc aim calls happen during "preaiming" logic
	if ( (heading>0) )
	{
		return (0);
	}
	
	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	turn rempslv to y-axis heading speed <120>;
	// if weapon will take more than 1 frame to turn to new angle, wait for turn
	if ( (get ABS(last_rempslv_heading-heading)>720) )
	{
		// seems to take 3 frames for wait-for-turn to process
		wait-for-turn rempslv around y-axis;
	}
	last_rempslv_heading=heading;
	
	start-script RestoreAfterDelay_rEMP();
	return (1);
}

FireWeapon4()
{
	move rempbarrel to z-axis [-2.400000] speed [100.000000];	
	emit-sfx 1024 + 0 from flare7;
	sleep 100;
	wait-for-move rempbarrel along z-axis;
	move rempbarrel to z-axis [1.000000] speed [3.000000];
	wait-for-move rempbarrel along z-axis;
}

AimFromWeapon4(piecenum)
{
	piecenum = rempslv;
}

QueryWeapon4(piecenum)
{
	piecenum = flare7;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode ltbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type FALL | NOHEATCLOUD;
		explode rtbarrel type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
