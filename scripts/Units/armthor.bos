#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, shoulder, lempslv, lempbarrel, rempslv, rempbarrel, sleeve, rtbarrel, ltbarrel, tracks,
flare1, flare2, flare3, flare4, flare5;

static-var  bMoving, moveSpeed, currentSpeed, animSpeed, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		if (currentSpeed<4) currentSpeed=4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}

//Smoke()
//{
//	while( TRUE )
//	{
//		if ( bMoving )
//		{
//			emit-sfx 1024 + 1 from smoke1;
//			emit-sfx 1024 + 1 from smoke2;
//		}
//		sleep animSpeed;
//	}
//}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	//start-script Smoke();
	start-script UnitSpeed();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.005495>;
	turn base to z-axis <0> - anglez speed <50.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


Create()
{
	bMoving = FALSE;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	hide flare5;
	gun_1 = flare1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}


StopMoving()
{
	bMoving = FALSE;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
    set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <45>;
	turn sleeve to x-axis <0.000000> speed <15.000000>;
	turn lempslv to y-axis <0> speed <45>;
	turn lempslv to x-axis <0> speed <45>;
	turn rempslv to y-axis <0> speed <45>;
	turn rempslv to x-axis <0> speed <45>;
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

SweetSpot(piecenum)
{
	piecenum = base;
}


//Weapon 1: Double Heavy Tesla Cannon
//===================================
AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <45.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <15.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( gun_1 == 0 )
	{
		move ltbarrel to z-axis [-2.400000] speed [500.000000];
		spin ltbarrel around z-axis speed <360> accelerate <120>;
		emit-sfx 1024 + 0 from flare2;
		sleep 100;
		wait-for-move ltbarrel along z-axis;
		move ltbarrel to z-axis [0.000000] speed [3.000000];
		wait-for-move ltbarrel along z-axis;
		stop-spin ltbarrel around z-axis decelerate <15>;
	}
	if( gun_1 == 1 )
	{
		move rtbarrel to z-axis [-2.400000] speed [500.000000];
		spin rtbarrel around z-axis speed <360> accelerate <120>;
		emit-sfx 1024 + 0 from flare1;
		sleep 100;
		wait-for-move rtbarrel along z-axis;
		move rtbarrel to z-axis [0.000000] speed [3.000000];
		wait-for-move rtbarrel along z-axis;
		stop-spin rtbarrel around z-axis decelerate <15>;
	}
	gun_1 = !gun_1;
}


AimFromWeapon1(piecenum)
{
	piecenum = sleeve;
}

QueryWeapon1(piecenum)
{
if (gun_1) piecenum = flare1;
if (!gun_1) piecenum = flare2;
}

//Weapon 2: Left EMP
//===================================

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn lempslv to x-axis <0.000000> - pitch speed <15.000000>;
	turn lempslv to y-axis heading speed <45.000000>;
	wait-for-turn lempslv around y-axis;
	wait-for-turn lempslv around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	move lempbarrel to z-axis [-2.400000] speed [100.000000];	
	emit-sfx 1024 + 0 from flare3;
	sleep 100;
	wait-for-move lempbarrel along z-axis;
	move lempbarrel to z-axis [0.000000] speed [3.000000];
	wait-for-move lempbarrel along z-axis;
}


AimFromWeapon2(piecenum)
{
	piecenum = lempslv;
}

QueryWeapon2(piecenum)
{
	piecenum = flare3;
}

//Weapon 3: Right EMP
//===================================

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn rempslv to x-axis <0.000000> - pitch speed <15.000000>;
	turn rempslv to y-axis heading speed <45.000000>;
	wait-for-turn rempslv around y-axis;
	wait-for-turn rempslv around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	move rempbarrel to z-axis [-2.400000] speed [100.000000];	
	emit-sfx 1024 + 0 from flare4;
	sleep 100;
	wait-for-move rempbarrel along z-axis;
	move rempbarrel to z-axis [0.000000] speed [3.000000];
	wait-for-move rempbarrel along z-axis;
}


AimFromWeapon3(piecenum)
{
	piecenum = rempslv;
}

QueryWeapon3(piecenum)
{
	piecenum = flare4;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode ltbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type FALL | NOHEATCLOUD;
		explode rtbarrel type FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode ltbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rtbarrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
