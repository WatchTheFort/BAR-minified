
#include "../../recoil_common_includes.h"

piece  base, tube, door1, door2, flare1, flare2, flare3, aimpoint;

static-var  isOpen, restore_delay, firepoint;

// Signal definitions
#define SIGNAL_AIM1 256

#include "../../opencloseanim.h"


#define BASEPIECE base
#define MAXTILT 0
#include "../../unit_hitbyweaponid_and_smoke.h"

Open()
{
	set ARMORED to 0;
	
	move tube to y-axis [0] speed [18];
	wait-for-move tube along y-axis;
	
	turn door1 to x-axis <0> speed <300>;
	turn door2 to x-axis <0> speed <300>;
	wait-for-turn door2 around x-axis;
	
	isOpen = 1;
}

Close()
{
	set ARMORED to 1;
	isOpen = 0;
	turn tube to y-axis <0.0> speed <300.0>;
	wait-for-turn tube around y-axis;
	
	turn door1 to x-axis <-90> speed <300>;
	turn door2 to x-axis <90> speed <300>;
	
	move tube to y-axis [-9] speed [18];
	wait-for-move tube along y-axis;
}


Create()
{
	hide aimpoint;
	hide flare3;
	hide flare2;
	hide flare1;
	restore_delay = 2000;
	isOpen = 0;
	start-script OpenCloseAnim(1);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	
	firepoint = 0;
	
	start-script OpenCloseAnim(0);
}

Activate()
{
	start-script OpenCloseAnim(1);
}

Deactivate()
{
	start-script OpenCloseAnim(0);
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 3;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script OpenCloseAnim(0);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	start-script OpenCloseAnim(1);
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	while( !isOpen )
	{
		sleep 100;
	}
	// dont need turn
	//turn post to y-axis heading speed <300.0>;
	//wait-for-turn post around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	return (TRUE);
}

FireWeapon1()
{
	firepoint = firepoint + 1;
	if (firepoint >= 3) firepoint = 0;
}

QueryWeapon1(pieceIndex)
{
	if (firepoint == 0 ) pieceIndex = flare1;
	if (firepoint == 1 ) pieceIndex = flare2;
	if (firepoint == 2 ) pieceIndex = flare3;
}



AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tube type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tube type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode tube type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}