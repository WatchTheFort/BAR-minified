
#include "../../recoil_common_includes.h"

piece  base, post, turret, flare, aimpoint;

static-var  isOpen, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256

#include "../../opencloseanim.h"


#define BASEPIECE base
#define MAXTILT 0
#include "../../unit_hitbyweaponid_and_smoke.h"

Open()
{
	move post to y-axis [4] speed [150.0];
	// move barrel to z-axis [0.0] speed [90.0];
	wait-for-move post along y-axis;
	// wait-for-move barrel along z-axis;
	isOpen = 1;
	set ARMORED to 0;
}
Close(){
	set ARMORED to 1;
	isOpen = 0;
	turn turret to x-axis <0.0> speed <300.0>;
	turn post to y-axis <0.0> speed <300.0>;
	// move barrel to z-axis [-8.0] speed [20.0];
	// wait-for-turn barrel around x-axis;
	wait-for-turn post around y-axis;
	move post to y-axis [-26.0] speed [90.0];
	wait-for-move post along y-axis;

}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	start-script OpenCloseAnim(0);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide aimpoint;
	hide flare;

	restore_delay = 2000;
	isOpen = 0;
	start-script OpenCloseAnim(1);

	move aimpoint to y-axis [5] speed [150.0];
	SLEEP_UNTIL_UNITFINISHED;
	start-script RestoreAfterDelay();
}

Activate()
{
	start-script OpenCloseAnim(1);
}

Deactivate()
{
	start-script OpenCloseAnim(0);
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

AimWeapon1(heading, pitch)
{
	start-script OpenCloseAnim(1);
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	while( !isOpen )
	{
		sleep 250;
	}
	turn post to y-axis heading speed <300.0>;
	if (pitch < 0) pitch = 0;
	turn turret to x-axis <0.0> - pitch speed <300.0>;
	wait-for-turn post around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024+0 from flare;
	sleep 150;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode post type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		
		explode flare type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode post type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode post type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type SMOKE | FALL | NOHEATCLOUD;
		
		explode flare type SMOKE | FALL | NOHEATCLOUD;
		explode base type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode post type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		
		explode flare type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
