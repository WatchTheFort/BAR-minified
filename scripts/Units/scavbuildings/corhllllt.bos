
#include "exptype.h"

piece  base, body, turret1, flare1, turret2, flare2, turret3, flare3, turret4, flare4;

static-var  restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3 1024
#define SIGNAL_AIM4 2048

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare4;
	hide flare3;
	hide flare2;
	hide flare1;
	hide base;
	restore_delay = 2000;
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}




AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret1 to y-axis heading speed <200.000000>;
	turn turret1 to x-axis <0.0> - pitch speed <200.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn turret1 around x-axis;
	return (1);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn turret2 to y-axis heading speed <200.000000>;
	turn turret2 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn turret2 around x-axis;
	return (1);
}

AimWeapon3(heading, pitch)
{
signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	turn turret3 to y-axis heading speed <200.000000>;
	turn turret3 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn turret3 around x-axis;
	return (1);
}

AimWeapon4(heading, pitch)
{
	signal SIGNAL_AIM4;
	set-signal-mask SIGNAL_AIM4;
	turn turret4 to y-axis heading speed <200.000000>;
	turn turret4 to x-axis <0.0> - pitch speed <200.000000>;
	wait-for-turn turret4 around y-axis;
	wait-for-turn turret4 around x-axis;
	return (1);
}

FireWeapon1()
{
	sleep 150;
}

FireWeapon2()
{
	sleep 150;
}

FireWeapon3()
{
	sleep 150;
}

FireWeapon4()
{
	sleep 150;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret1;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = turret2;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = turret3;
}

AimFromWeapon4(pieceIndex)
{
	pieceIndex = turret4;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare1;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flare2;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = flare3;
}

QueryWeapon4(pieceIndex)
{
	pieceIndex = flare4;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode turret1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type BITMAPONLY | NOHEATCLOUD;
		explode turret2 type BITMAPONLY | NOHEATCLOUD;
		explode flare2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type FALL | NOHEATCLOUD;
		explode turret1 type FALL | NOHEATCLOUD;
		explode flare1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode turret1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare2 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flare2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
