#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lflare, rflare, turret, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8, barrelcon, lbarrel, rbarrel, launch, lrocket,
       rrocket, base;

static-var  Static_Var_1, gun_1, gun_2, bAiming, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


#define BASEPIECE base
#define HITSPEED <30.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	sleep 150;
	return (0);
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
	return (0);
}

Create()
{
	hide lflare;
	hide rflare;
	turn lflare to y-axis <175> now;
	turn rflare to y-axis <175> now;
	move lflare to z-axis [6] now;
	move rflare to z-axis [6] now;
	bAiming = FALSE;
	gun_1 = lflare;
	gun_2 = lflare;
	hide lrocket;
	hide rrocket;
	hide launch;
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	bAiming = FALSE;
	turn turret to y-axis <0.00000> speed <80.00000>;
	turn barrelcon to x-axis <0.00000> speed <50.00000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

RestoreSecondary()
{
	sleep restore_delay;
	bAiming = FALSE;
	turn launch to x-axis <0.00000> speed <20.00000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <120.00000>;
	turn barrelcon to x-axis <0.00000> - pitch speed <80.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrelcon around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( !gun_1 )
	{
		emit-sfx 1024 + 0 from rflare;
		move rbarrel to z-axis [-5.00000] now;
		move rbarrel to z-axis [0.00000] speed [7.50000];
	}
	if( gun_1 )
	{
		emit-sfx 1024 + 0 from lflare;
		move lbarrel to z-axis [-5.00000] now;
		move lbarrel to z-axis [0.00000] speed [7.50000];
	}
	gun_1 = !gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	turn launch to x-axis <-40.00000> speed <50.00000>;
	wait-for-turn launch around x-axis;
	start-script RestoreSecondary();
	return (1);
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		gun_2 = rflare;
		return (0);
	}
	if( gun_2 == 1 )
	{
		gun_2 = lflare;
		return (0);
	}
}

AimFromSecondary(piecenum)
{
	piecenum = launch;
	return (0);
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = lrocket;
	}
	if( gun_2 == 1 )
	{
		piecenum = rrocket;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode lbarrel type FALL | BITMAP1 | NOHEATCLOUD;
			explode rbarrel type FALL | BITMAP1 | NOHEATCLOUD;
			explode base type SHATTER | NOHEATCLOUD;
			explode launch type FALL | BITMAP3 | NOHEATCLOUD;
			explode turret type SHATTER | BITMAP4 | NOHEATCLOUD;
			return (corpsetype);
		}
		corpsetype = 3;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type SHATTER | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode lbarrel type FALL | BITMAP1 | NOHEATCLOUD;
			explode rbarrel type FALL | BITMAP1 | NOHEATCLOUD;
			explode base type SHATTER | NOHEATCLOUD;
			explode launch type FALL | BITMAP3 | NOHEATCLOUD;
			explode turret type SHATTER | BITMAP4 | NOHEATCLOUD;
			return (corpsetype);
		}
		corpsetype = 3;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type SHATTER | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lbarrel type FALL | BITMAP1 | NOHEATCLOUD;
		explode rbarrel type FALL | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode launch type FALL | BITMAP3 | NOHEATCLOUD;
		explode turret type SHATTER | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type SHATTER | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type SHATTER | NOHEATCLOUD;
	explode launch type SHATTER | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	return (corpsetype);
}
