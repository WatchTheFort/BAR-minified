
#include "exptype.h"

piece  lflare, rflare, turret, wake, barrelcon, lbarrel, rbarrel, launch, lrocket,
       rrocket, base;

static-var  gun_1, isAiming, restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1
#define SIGNAL_IDLE 8

#define BASEPIECE base
#define HITSPEED <30.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 8
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"

HoverIdle()
{
	signal SIGNAL_IDLE;
	set-signal-mask SIGNAL_IDLE;
	while( TRUE )
	{
	    emit-sfx 1024 + 3 from wake;
	    sleep 1800;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	signal SIGNAL_IDLE;
	var waketime;
	var bowtime;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from wake;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 30 ) waketime = 30;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
	signal SIGNAL_IDLE;
	start-script HoverIdle();
	return (0);
}

Create()
{
	hide barrelcon;
	hide lrocket;
	hide rrocket;
	hide wake;
	hide lflare;
	hide rflare;
	turn lflare to y-axis <175> now;
	turn rflare to y-axis <175> now;
	move lflare to z-axis [6] now;
	move rflare to z-axis [6] now;
	isAiming = FALSE;
	gun_1 = lflare;
	hide lrocket;
	hide rrocket;
	hide launch;
	restore_delay = 3000;
	return (0);
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	isAiming = FALSE;
	turn turret to y-axis <0.00000> speed <80.00000>;
	turn barrelcon to x-axis <0.00000> speed <50.00000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

RestoreWeapon2()
{
	sleep restore_delay;
	isAiming = FALSE;
	turn launch to x-axis <0.00000> speed <20.00000>;
	return (0);
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	isAiming = TRUE;
	turn turret to y-axis heading speed <120.00000>;
	turn barrelcon to x-axis <0.00000> - pitch speed <80.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrelcon around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	if( !gun_1 )
	{
		emit-sfx 1024 + 0 from rflare;
		move rbarrel to z-axis [-5.00000] now;
		move rbarrel to z-axis [0.00000] speed [7.50000];
	}
	if( gun_1 )
	{
		emit-sfx 1024 + 0 from lflare;
		move lbarrel to z-axis [-5.00000] now;
		move lbarrel to z-axis [0.00000] speed [7.50000];
	}
	gun_1 = !gun_1;
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = gun_1;
	return (0);
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = base;
	return (0);
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = base;
	return (0);
}

FireWeapon2()
{	
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	start-script RestoreAfterDelay();
	return (1);
}



Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lbarrel type FALL | BITMAP1 | NOHEATCLOUD;
		explode rbarrel type FALL | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launch type FALL | BITMAP3 | NOHEATCLOUD;
		explode turret type BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode launch type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
	explode launch type EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode turret type EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	return (corpsetype);
}
