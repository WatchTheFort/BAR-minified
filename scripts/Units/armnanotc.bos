#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, aim, emitnano;

static-var  BuildHeading;

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn aim to y-axis <0.000000> speed <100.000000>;
}

RestoreAfterDelay()
{
	sleep 5000;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
    hide emitnano;
	BuildHeading = 0;
	return (0);
}

SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}

StartBuilding(heading)
{
	signal 1; // stop the restore delay stuff
	BuildHeading = heading;
    show emitnano;
	turn aim to y-axis BuildHeading speed <320.000000>;
	wait-for-turn aim around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
    hide emitnano;
	set INBUILDSTANCE to 0;
	signal 1; // we must signal here, instead of in RestoreAfterDelay(), as that only gets called 1 frame later, so startbuilding wont terminate it
	set-signal-mask 1; // make child threads inherit signal mask of 1
	start-script RestoreAfterDelay();
}

QueryNanoPiece(piecenum)
{
	piecenum = emitnano;
}

SweetSpot(piecenum)
{
	piecenum = aim;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode aim type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emitnano type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode aim type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emitnano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aim type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emitnano type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aim type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode emitnano type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
