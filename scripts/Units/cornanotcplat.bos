#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, aim, emitnano;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;


RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <15.000000>;
	turn base to z-axis <0> - anglez speed <15.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> - anglex speed <12.000000>;
	turn base to z-axis anglez speed <12.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis anglex / <0.005495> speed <9.000000>;
	turn base to z-axis <0> - (anglez / <0.005495>) speed <9.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to x-axis <0.000000> speed <3.000000>;
	turn base to z-axis <0.000000> speed <3.000000>;
}


Activatescr()
{
	sleep 1;
}

Deactivatescr()
{
	sleep 1;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from aim;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script Activatescr();
	turn aim to y-axis Static_Var_1 speed <320.000000>;
	wait-for-turn aim around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script Deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	Static_Var_1 = 0;
	Static_Var_2 = 5000;
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	turn aim to y-axis <0.000000> speed <100.000000>;
	wait-for-turn aim around y-axis;
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = emitnano;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = aim;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode aim type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emitnano type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode aim type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emitnano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aim type SMOKE | FALL | NOHEATCLOUD;
		explode emitnano type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode aim type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode emitnano type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
