
#include "../recoil_common_includes.h"

piece  base, turret, arm, beam, lpump, rpump, nano1, nano2, wake;

#define SIGNAL_BUILD 2
#define SIGNAL_MOVE 1

static-var  nano, pump, readyToBuild;

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	var waketime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
}

MovementControl()
{
	while (pump)
	{ 
			move lpump to y-axis [1] speed [1];
			move lpump to x-axis [1] speed [1];
			sleep 2000;
			move lpump to y-axis [0] speed [1];
			move lpump to x-axis [0] speed [1];
			sleep 2000;
	}

}


Create()
{
	hide wake;
	hide nano2;
	hide nano1;
	turn arm to x-axis <-90> now;
	turn beam to x-axis <-180> now;

	readyToBuild = FALSE;
	SLEEP_UNTIL_UNITFINISHED;
	start-script RockOnWaves();
	
}


StartBuilding(heading,pitch)
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	if (!readyToBuild){
		pump = 1;
		
		turn arm to x-axis <45> speed <90>;
		turn beam to x-axis <-45> speed <180>;
		wait-for-turn beam around x-axis;

	}
	start-script MovementControl();
	
	turn turret to y-axis heading speed <360.0>;
	turn beam to x-axis <-45> -pitch speed <90>;

	show nano1;
	show nano2;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;
	hide nano1;
	hide nano2;

	sleep 6000;
	set INBUILDSTANCE to 1;
	readyToBuild = FALSE;

	turn arm to x-axis <-90> speed <90>;
	turn beam to x-axis <-180> speed <180>;
	turn turret to y-axis <0> speed <180>;
	wait-for-turn beam around x-axis;
	move lpump to y-axis [0] speed [1];
	move lpump to x-axis [0] speed [1];
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nano1 + nano;
	nano = !nano;
}


Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode arm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type BITMAPONLY | NOHEATCLOUD;
		explode nano2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode arm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type FALL | NOHEATCLOUD;
		explode nano1 type FALL | NOHEATCLOUD;
		explode nano2 type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode arm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode arm type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
