
#include "exptype.h"

piece  base, base2, base3, flarer1, flarer2, body1, turretg, boreg, barrelg, flareg, neck,
 turretb, boreb, barrelb, flareb, turretr, borer, barrelr, aimpoint;

static-var  isOpen, gun_3, restore_delay, Static_Var_3, Static_Var_7, Static_Var_8,
				aimdir;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_AIM3 1024

#include "../opencloseanim.h"

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
#define CATT1_PIECE_X turretb
#define CATT1_PIECE_Y turretb

#define CATT1_MAX_VELOCITY <3.00>
#define CATT1_ACCELERATION <0.16>
#define CATT1_JERK <0.5>
#define CATT1_PRECISION <1.2>
#define CATT1_RESTORE_SPEED <1.0>
#define CATT1_PITCH_SPEED <85>

#include "../constant_acceleration_turret_turning_1.h"

#define CATT2_PIECE_X turretg
#define CATT2_PIECE_Y body1

#define CATT2_MAX_VELOCITY <6.00>
#define CATT2_ACCELERATION <0.4>
#define CATT2_JERK <1.5>
#define CATT2_PRECISION <1.2>
#define CATT2_RESTORE_SPEED <1.0>
#define CATT2_PITCH_SPEED <150>

#include "../constant_acceleration_turret_turning_2.h"



RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while(( get ABS( rockAng ) )< <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn base to x-axis rockAng speed rockSpeed*5;
			turn base to z-axis rockAng speed rockSpeed*5;
			wait-for-turn base around x-axis;
			wait-for-turn base around z-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 4096;
	set-signal-mask 4096;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.0125>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}


Open()
{
	set ARMORED to 0;

		move body1 to y-axis [0] speed [90];
		move turretb to y-axis [-14] speed [90];
		wait-for-move turretb along y-axis;
		wait-for-move body1 along y-axis;

		move turretb to y-axis [0] speed [90];
		wait-for-move turretb along y-axis;

		move borer to z-axis [0] speed [30];
		move barrelr to z-axis [0] speed [20];
		turn turretg to x-axis <0> speed <180>;
		move boreg to z-axis [0] speed [24];
		move barrelg to z-axis [0] speed [10];
		move boreb to z-axis [0] speed [12];
		move barrelb to z-axis [0] speed [18];
		wait-for-turn turretb around x-axis;
		wait-for-move borer along y-axis;
		wait-for-turn turretg around x-axis;

	sleep 22;
	isOpen = TRUE;
}

Close()
{
	isOpen = FALSE;

	turn turretb to x-axis <0> speed <180>;
	turn turretg to x-axis <0> speed <180>;
	turn turretr to y-axis <0> speed <180>;	
	turn body1 to y-axis <0> speed <180>;	
	turn turretb to y-axis <0> speed <180>;	
	move turretb to y-axis [-14] speed [90];
	wait-for-turn turretb around x-axis;
	wait-for-turn turretg around x-axis;
	wait-for-turn turretr around x-axis;
	wait-for-move turretb along y-axis;

	move boreb to z-axis [-6] speed [12];
	move barrelb to z-axis [-9] speed [18];
	turn turretg to x-axis <180> speed <180>;
	move boreg to z-axis [-12] speed [24];
	move barrelg to z-axis [-4] speed [10];
	move borer to z-axis [-15] speed [30];
	move barrelr to z-axis [-10] speed [20];
	wait-for-move borer along y-axis;
	wait-for-turn turretg around x-axis;

	move turretb to y-axis [-28] speed [90];
	move body1 to y-axis [-14] speed [90];
	wait-for-move turretb along y-axis;
	wait-for-move body1 along y-axis;

	wait-for-turn body1 around x-axis;
	wait-for-turn turretb around x-axis;
	set ARMORED to 1;
	
	start-script CATT1_Init();
	start-script CATT2_Init();
}

Create()
{
	hide flareb;
	hide flareg;
	hide aimpoint;
	hide flarer2;
	hide flarer1;
    hide flarer1;
    hide flarer2;
    hide flareb;
    hide flareg;
	gun_3 = 0;
	isOpen = TRUE;
	Static_Var_3 = 0;
	restore_delay = 2000;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script OpenCloseAnim(1);
	start-script CATT1_Init();
	start-script CATT2_Init();
}

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"


Activate()
{

	start-script OpenCloseAnim(1);
}

Deactivate()
{
	signal SIGNAL_AIM1;
	signal SIGNAL_AIM2;
	signal SIGNAL_AIM3;
	start-script OpenCloseAnim(0);
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 4;
}

AimWeapon1(heading, pitch)
{
	if (!isOpen)
	{
		return (0);
	}	
	aimDir = heading;
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	//We can do this any time

	call-script CATT1_Aim(heading,pitch);

	return (1);
}


AimWeapon2(heading, pitch)
{
	if (!isOpen)
	{
		return (0);
	}	
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;

	call-script CATT2_Aim(heading,pitch);
	return (1);
}

AimWeapon3(heading, pitch)
{
	signal SIGNAL_AIM3;
	set-signal-mask SIGNAL_AIM3;
	while( !isOpen )
	{
		sleep 250;
	}
	turn turretr to y-axis heading speed <500.000000>;
	wait-for-turn turretr around y-axis;

	return (1);
}

FireWeapon1()
{
	start-script RockZ(-27,aimDir);
	emit-sfx 1024 + 0 from flareb;
	move boreb to z-axis [-4.000000] speed [500.000000];
	move barrelb to z-axis [-4.000000] speed [500.000000];
	sleep 150;
	move boreb to z-axis [0.000000] speed [3.000000];
	move barrelb to z-axis [0.000000] speed [3.000000];
}

FireWeapon2()
{
	sleep 150;
}

FireWeapon3()
{
	gun_3 = !gun_3;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = aimpoint;
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = body1;
}

AimFromWeapon3(pieceIndex)
{
	pieceIndex = turretr;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flareb;
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = flareg;
}

QueryWeapon3(pieceIndex)
{
	pieceIndex = flarer1 + gun_3;	
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode body1 type BITMAPONLY | NOHEATCLOUD;
		explode turretg type BITMAPONLY | NOHEATCLOUD;
		explode boreg type BITMAPONLY | NOHEATCLOUD;
		explode barrelg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type BITMAPONLY | NOHEATCLOUD;
		explode neck type BITMAPONLY | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode borer type BITMAPONLY | NOHEATCLOUD;
		explode barrelr type BITMAPONLY | NOHEATCLOUD;
		explode flarer1 type BITMAPONLY | NOHEATCLOUD;
		explode flarer2 type BITMAPONLY | NOHEATCLOUD;
		explode turretb type BITMAPONLY | NOHEATCLOUD;
		explode boreb type BITMAPONLY | NOHEATCLOUD;
		explode barrelb type BITMAPONLY | NOHEATCLOUD;
		explode flareb type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretg type FALL | NOHEATCLOUD;
		explode boreg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type FALL | NOHEATCLOUD;
		explode neck type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode borer type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer1 type FALL | NOHEATCLOUD;
		explode flarer2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turretb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreb type FALL | NOHEATCLOUD;
		explode barrelb type FALL | NOHEATCLOUD;
		explode flareb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode body1 type BITMAPONLY | NOHEATCLOUD;
		explode turretg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelg type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode borer type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer2 type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode turretb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode body1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretg type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode boreg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flareg type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode borer type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer1 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flarer2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode turretb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boreb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrelb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flareb type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
