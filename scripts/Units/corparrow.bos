
#include "exptype.h"

piece  base, turret, barrel, sleeve, flare ,smoke1, smoke2, smoke3;

static-var  isMoving, moveSpeed, currentSpeed, animSpeed, terrain,  restore_delay;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_MOVE 1

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*20/moveSpeed;
		if (currentSpeed<4) currentSpeed=4;
		animSpeed = 1800 / currentSpeed;
		sleep 142;
	}
}

Smoke()
{
	while( TRUE )
	{
		if ( isMoving )
		{
			if( terrain == 4 )
			{
				emit-sfx 1024 + 1 from smoke1;
				emit-sfx 1024 + 1 from smoke2;
				emit-sfx 1024 + 1 from smoke3;
			}
		}
		sleep animSpeed;
	}
}



#define BASEPIECE base
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 7
#define MAXTILT 100

#include "unit_hitbyweaponid_and_smoke.h"

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.000000>;
	turn base to z-axis <0> - anglez speed <50.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

Create()
{
	hide smoke3;
	hide flare;
	hide smoke2;
	hide smoke1;
	isMoving = FALSE;
	moveSpeed = get (MAX_SPEED);
	animSpeed = 100;
	restore_delay = 3000;
	start-script SmokeUnit();
}

setSFXoccupy(state)
{
	terrain = state;
}

SetMaxReloadTime(reloadMS)
{
	restore_delay = reloadMS * 2;
}

StartMoving()
{
	isMoving = TRUE;  
  signal SIGNAL_MOVE;
  set-signal-mask SIGNAL_MOVE;
  start-script UnitSpeed();
	start-script Smoke();
}


StopMoving()
{
	isMoving = FALSE;
  signal SIGNAL_MOVE;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.000000> speed <45.000000>;
	turn turret to x-axis <0.000000> speed <23.000000>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <55.000000>;
	turn turret to x-axis <0.000000> - pitch speed <35.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-4.000000] speed [500.000000];
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.000000] speed [6.000000];
	wait-for-move barrel along z-axis;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = barrel;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode sleeve type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		//explode flare type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleeve type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		//explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
