
#include "../recoil_common_includes.h"

piece  ground, base, door1, door2, NanoTurret, Nanoemit;

static-var  buildHeading, readyToBuild, oldHead;

// Signal definitions
#define SIGNAL_MOVE 1

#define SIGNAL_BUILD 2



#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	while(1)
	{
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <-1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
		move ground to y-axis [0.0] speed [0.15];
		wait-for-turn ground around x-axis;
		turn ground to x-axis <1.0> speed <1.5>;
		move ground to y-axis [-0.1] speed [0.15];
		wait-for-move ground along y-axis;
	}
}


Create()
{
	hide nanoemit;
	hide ground;
	buildHeading = 0;
	readyToBuild = FALSE;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

StartBuilding(heading)
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

	show nanoemit;
	buildHeading = heading;

	if (!readyToBuild){
		move door1 to y-axis [1] speed [3];
		move door2 to y-axis [1] speed [3];
		wait-for-move door1 along y-axis;
		
		move door1 to x-axis [3.4] speed [9];
		move door2 to x-axis [-3.4] speed [9];
		wait-for-move door1 along x-axis;
		
		move nanoturret to y-axis [8] speed [24];
		wait-for-move nanoturret along y-axis;
		readyToBuild = TRUE;
	}	

	turn NanoTurret to y-axis <180>+buildHeading speed <160.0>;
	wait-for-turn NanoTurret around y-axis;
	set INBUILDSTANCE to 1;
	show nanoemit;
}

StopBuilding()
{
	signal SIGNAL_BUILD;
	set-signal-mask SIGNAL_BUILD;

	hide nanoemit;

	sleep 6000;

	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;

	turn NanoTurret to y-axis <0.0> speed <180.0>;
	wait-for-turn NanoTurret around y-axis;

	move nanoturret to y-axis [0] speed [24];
	wait-for-move nanoturret along y-axis;
	
	
	move door1 to x-axis [0] speed [9];
	move door2 to x-axis [0] speed [9];
	wait-for-move door1 along x-axis;
	
	move door1 to y-axis [0] speed [3];
	move door2 to y-axis [0] speed [3];
	wait-for-move door1 along y-axis;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 1024 + 0 from ground;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}


AimWeapon1(heading, pitch)
{
	return (1);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = base;
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = base;
}


QueryNanoPiece(pieceIndex)
{
	pieceIndex = nanoemit;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode ground type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode ground type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoturret type SMOKE | FALL | NOHEATCLOUD;
		explode door2 type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode ground type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode base type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nanoturret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
