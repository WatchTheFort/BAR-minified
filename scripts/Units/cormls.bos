
#include "../recoil_common_includes.h"

piece  base, door1, door2, neck, boom, nano, wake;

static-var  buildHeading, readyToBuild;

// Signal definitions
#define SIGNAL_MOVE 1
#define SIGNAL_BUILD 2

#define BASEPIECE base
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100

#include "../unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	while(1)
	{
		turn Base to x-axis <1.0> speed <1.5>;
		move Base to y-axis [0.0] speed [0.15];
		wait-for-turn Base around x-axis;
		turn Base to x-axis <-1.0> speed <1.5>;
		move Base to y-axis [-0.1] speed [0.15];
		wait-for-move Base along y-axis;
		move Base to y-axis [0.0] speed [0.15];
		wait-for-turn Base around x-axis;
		turn Base to x-axis <1.0> speed <1.5>;
		move Base to y-axis [-0.1] speed [0.15];
		wait-for-move Base along y-axis;
	}
}


Create()
{
	hide nano;
	hide wake;
	buildHeading = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}


StartBuilding(heading)
{

	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	if (!readyToBuild){

		turn door1 to z-axis <-175> speed <360>;
		turn door2 to z-axis <175> speed <360>;
		wait-for-turn door1 around z-axis;

		move neck to y-axis [3] speed [12];
		move boom to y-axis [9] speed [24];
		wait-for-move neck along y-axis;
		readyToBuild = TRUE;
	}

	turn boom to y-axis heading speed <160.038462>;
	wait-for-turn boom around y-axis;
	
	set INBUILDSTANCE to 1;

	show nano;
}

StopBuilding()
{
	signal SIGNAL_BUILD;	
	set-signal-mask SIGNAL_BUILD;

	hide nano;

	sleep 6000;
	set INBUILDSTANCE to 0;
	readyToBuild = FALSE;
	
	turn boom to y-axis <0> speed <160.038462>;
	wait-for-turn boom around y-axis;

	move neck to y-axis [3] speed [12];
	move boom to y-axis [9] speed [24];
	wait-for-move boom along y-axis;

	turn door1 to z-axis <-175> speed <360>;
	turn door2 to z-axis <175> speed <360>;
	wait-for-turn door1 around z-axis;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
}

QueryNanoPiece(pieceIndex)
{
	pieceIndex = nano;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode neck type BITMAPONLY | NOHEATCLOUD;
		explode nano type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode nano type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode boom type SMOKE | FALL | NOHEATCLOUD;
		explode nano type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode neck type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode boom type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode nano type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
