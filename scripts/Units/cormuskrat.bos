#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD	2

piece  base, track, arm1, arm2, turret, beam, door, nano ;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, notBuilding, bMoving, animSpeed;




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

Go()
{

	set INBUILDSTANCE to 1;
	turn arm1 to x-axis <60> speed <180>;
	turn arm2 to x-axis <30> speed <180>;
	wait-for-turn arm1 around x-axis;
	turn door to x-axis <90> speed <180>;
	move beam to y-axis [5] speed [10];
}

Stop()
{
	set INBUILDSTANCE to 0;

	move beam to y-axis [0] speed [10];
	turn door to x-axis <0> speed <180>;
	wait-for-turn door around x-axis;
	turn arm1 to x-axis <-90> speed <180>;
	turn arm2 to x-axis <105> speed <180>;
	turn door to x-axis <0> speed <180>;

}


RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script Go();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}


Create()
{
	bMoving = FALSE;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
//	animSpeed = 4;
	start-script SmokeUnit();
	hide nano;
	turn arm1 to x-axis <-90> speed <180>;
	turn arm2 to x-axis <105> speed <180>;
	


}


Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}


StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to z-axis heading speed <360.000000>;
//	turn arm2 to x-axis heading speed <360.000000>;  up/down movement not working correct
	wait-for-turn turret around z-axis;
	set INBUILDSTANCE to 1;
}


StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}



QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode beam type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode track type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
