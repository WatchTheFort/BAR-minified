
#include "exptype.h"

piece  base, arm, tower, wake, bow, rdoor, ldoor, boom1, boom2, boom3,
       boom4, magnet, link, boom5, boom6;

#define DEBUG
#include "../debug.h"

// Signal definitions
#define SIGNAL_MOVE 1

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 9
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			
			rockSpeed = <1.45> - get ABS(rockAng);
			dbg(rockAng, rockSpeed);
			turn base to x-axis rockAng speed rockSpeed*3;
			wait-for-turn base around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}


Create()
{
	hide bow;
	hide link;
	hide wake;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.35] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
       bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 1 from wake;
		if (bowtime) emit-sfx 1024 + 2 from bow;
        	bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}




TransportPickup(unitid)
{
	set BUSY to 1;
	attach-unit unitid to link;
	set BUSY to 0;
}

TransportDrop(unitid, position)
{
	set BUSY to 1;
	drop-unit unitid;
	set BUSY to 0;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tower type BITMAPONLY | NOHEATCLOUD;
		explode arm type BITMAPONLY | NOHEATCLOUD;
		explode rdoor type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tower type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode arm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rdoor type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tower type SMOKE | FALL | NOHEATCLOUD;
		explode arm type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode rdoor type SMOKE | FALL | NOHEATCLOUD;
		explode ldoor type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode tower type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode arm type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode rdoor type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode ldoor type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
