
#include "exptype.h"

piece  rmis, lmis, rlauncher, llauncher, flare, turret, wake, support, cannon,
       body, base;

static-var  isAiming;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8
#define SIG_IDLE			16



#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 10
#define MAXTILT 200

#include "unit_hitbyweaponid_and_smoke.h"

HoverIdle()
{
	signal SIG_IDLE;
	set-signal-mask SIG_IDLE;
	while( TRUE )
	{
	    emit-sfx 1024 + 2 from wake;
	    sleep 1800;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	signal SIG_IDLE;
	var waketime;
	var bowtime;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake;
		if (bowtime) emit-sfx 1024 + 1 from wake;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 30 ) waketime = 30;
		sleep 15000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	signal SIG_IDLE;
	start-script HoverIdle();
	return (0);
}

Create()
{
	hide wake;
	hide flare;
	hide rmis;
	hide lmis;
	isAiming = FALSE;
	return (0);
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn turret to y-axis <0.00000> speed <75.00000>;
	turn support to x-axis <0.00000> speed <50.00000>;
	
	isAiming = FALSE;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep 8000;
	start-script ExecuteRestoreAfterDelay();
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = turret;
	return (0);
}

FireWeapon1()
{	
	emit-sfx 1024 + 0 from flare;
	move cannon to z-axis [-10.00000] speed [1250.00000];
	sleep 150;
	move cannon to z-axis [0.00000] speed [7.50000];
	return (0);
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	isAiming = TRUE;
	turn turret to y-axis heading speed <120.00000>;
	turn support to x-axis <0.00000> - pitch speed <80.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn support around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryWeapon2(pieceIndex)
{
	pieceIndex = base;
	return (0);
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = base;
	return (0);
}

FireWeapon2()
{	
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	start-script RestoreAfterDelay();
	return (1);
}



Killed(severity, corpsetype)
{
	hide flare;
	hide rmis;
	hide lmis;

	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode cannon type FALL | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode body type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode cannon type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
	explode body type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode support type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode turret type FIRE | SMOKE | FALL | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	return (corpsetype);
}
