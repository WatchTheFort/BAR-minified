#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, body, w_glass, jetl, jetr, thrustl, thrustr, thrustm, backwing, centerwing, centerpadd, rhookbase, rhookext1, rhookext2, rhook, lhookbase, lhookext1, lhookext2, lhook;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;


activatescr()   //transport start  - LOAD - animation of claws
{
	if( TRUE ) //
	{
		//move larm3 to y-axis <-5> now;
		//move rarm3 to y-axis <-5> now;
		//turn larm2 to z-axis <-45> speed <90>;
		//turn rarm2 to z-axis <45> speed <90>;


		sleep 50;  //close

		//turn larm2 to z-axis <0> speed <90>;
		//turn rarm2 to z-axis <0> speed <90>;

	}
	sleep 50;
}

deactivatescr()  //transport end - UNLOAD -
{
	if( TRUE )
	{
		//turn larm2 to z-axis <-45> speed <90>;
		//turn rarm2 to z-axis <45> speed <90>;
		sleep 100;
		//turn larm2 to z-axis <0> speed <90>;
		//turn rarm2 to z-axis <0> speed <90>;
	}
	sleep 50;
}


#define BASEPIECE base
#define HITSPEED <20.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 1
#define MAXTILT 200
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}

#define IDLEHOVERSCALE 16
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( (healthpercent < 66) AND (healthpercent > 0 ))
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}


RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

/*
StartMoving(){
	get PRINT( get GAME_FRAME,1111);
	isIdle = TRUE;
}


StopMoving(){
	get PRINT( get GAME_FRAME,2222);
	isIdle = FALSE;
}

MoveRate0(){
	get PRINT(get GAME_FRAME,333, 00);
}
SetSFXOccupy(terraintype){
	get PRINT(get GAME_FRAME,0, terraintype);
}


MoveRate1(){
	get PRINT(get GAME_FRAME,333, 11);
}

MoveRate2(){
	get PRINT(get GAME_FRAME,333, 22);
}

MoveRate3(){
	get PRINT(get GAME_FRAME,333, 33);
}*/

Create()
{
	hide thrustl;
	hide thrustr;
	hide thrustm;
	hide link;
	turn jetl to x-axis <-90.000000> now;
	turn jetr to x-axis <-90.000000> now;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}


SweetSpot(piecenum)
{
	piecenum = base;
}


QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}


BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
	//move larm3 to y-axis [-3] now;
	//move rarm3 to y-axis [-3] now;

}

EndTransport()
{
	start-script RequestState(1);
}



MoveRate0()
{
	turn jetl to x-axis <-90.000000> speed <150.000000>;
	turn jetr to x-axis <-90.000000> speed <150.000000>;

}

MoveRate1()
{
	turn jetl to x-axis <-70.000000> speed <75.000000>;
	turn jetr to x-axis <-70.000000> speed <75.000000>;
}

MoveRate2()
{
	turn jetl to x-axis <-50.000000> speed <55.000000>;
	turn jetr to x-axis <-50.000000> speed <55.000000>;

}

MoveRate3()
{
	turn jetl to x-axis <0.000000> speed <85.000000>;
	turn jetr to x-axis <0.000000> speed <85.000000>;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode backwing type BITMAPONLY | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode jetl type BITMAPONLY | NOHEATCLOUD;
		explode jetr type BITMAPONLY | NOHEATCLOUD;
		explode backwing type BITMAPONLY | NOHEATCLOUD;
		explode rhookext1 type FALL | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type BITMAPONLY | NOHEATCLOUD;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode jetl type BITMAPONLY | NOHEATCLOUD;
		explode jetr type BITMAPONLY | NOHEATCLOUD;
		explode backwing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode rhookext1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type BITMAPONLY | NOHEATCLOUD;
	explode base type BITMAPONLY | NOHEATCLOUD;
	explode jetl type BITMAPONLY | NOHEATCLOUD;
	explode jetr type BITMAPONLY | NOHEATCLOUD;
	explode backwing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode rhookext1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
