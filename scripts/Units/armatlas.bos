#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, link, body, w_glass, jetl, jetr, thrustl, thrustr, thrustm, backwing, centerwing, centerpadd, rhookbase, rhookext1, rhookext2, rhook, lhookbase, lhookext1, lhookext2, lhook;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;


activatescr()   //transport start  - LOAD - animation of claws
{
	if( TRUE ) //
	{
		//move larm3 to y-axis <-5> now;
		//move rarm3 to y-axis <-5> now;
		//turn larm2 to z-axis <-45> speed <90>;
		//turn rarm2 to z-axis <45> speed <90>;


		sleep 50;  //close

		//turn larm2 to z-axis <0> speed <90>;
		//turn rarm2 to z-axis <0> speed <90>;

	}
	sleep 50;
}

deactivatescr()  //transport end - UNLOAD -
{
	if( TRUE )
	{
		//turn larm2 to z-axis <-45> speed <90>;
		//turn rarm2 to z-axis <45> speed <90>;
		sleep 100;
		//turn larm2 to z-axis <0> speed <90>;
		//turn rarm2 to z-axis <0> speed <90>;
	}
	sleep 50;
}




SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 and healthpercent > 0 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}


InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}


RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}



Create()
{
	hide thrustl;
	hide thrustr;
	hide thrustm;
	hide link;
	turn jetl to x-axis <-90.000000> now;
	turn jetr to x-axis <-90.000000> now;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
}


SweetSpot(piecenum)
{
	piecenum = base;
}


QueryTransport(Func_Var_1)
{
	Func_Var_1 = 1;
}


BeginTransport(Func_Var_1)
{
	move link to y-axis [0.000000] - Func_Var_1 now;
	start-script RequestState(0);
	//move larm3 to y-axis [-3] now;
	//move rarm3 to y-axis [-3] now;

}

EndTransport()
{
	start-script RequestState(1);
}



MoveRate0()
{
	turn jetl to x-axis <-90.000000> speed <150.000000>;
	turn jetr to x-axis <-90.000000> speed <150.000000>;

}

MoveRate1()
{
	turn jetl to x-axis <-70.000000> speed <75.000000>;
	turn jetr to x-axis <-70.000000> speed <75.000000>;
}

MoveRate2()
{
	turn jetl to x-axis <-50.000000> speed <55.000000>;
	turn jetr to x-axis <-50.000000> speed <55.000000>;

}

MoveRate3()
{
	turn jetl to x-axis <0.000000> speed <85.000000>;
	turn jetr to x-axis <0.000000> speed <85.000000>;
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type FALL | BITMAP3 | NOHEATCLOUD;
		explode base type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode jetl type FALL | BITMAP5 | NOHEATCLOUD;
		explode jetr type FALL | BITMAP1 | NOHEATCLOUD;
		explode backwing type FALL | BITMAP2 | NOHEATCLOUD;
		explode rhookext1 type FALL | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type FALL | BITMAP3 | NOHEATCLOUD;
		explode base type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode jetl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
		explode jetr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode backwing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode rhookext1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode base type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode jetl type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	explode jetr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode backwing type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode rhookext1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
