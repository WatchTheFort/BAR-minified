
#include "../recoil_common_includes.h"

piece  base, ground, wake1, wake2, turret, sleeve, flare, mturret, mbarrel, flare1, flare2, flare3;
		
static-var  restore_delay, Static_Var_7, Static_Var_8, aimDir, oldHead, gun_1;

// Signal definitions
#define SIGNAL_AIM1 256
#define SIGNAL_AIM2 512
#define SIGNAL_MOVE 1

lua_UnitScriptDecal(lightIndex, xpos,zpos, heading) 
{
	return 0;
}


lua_FlameShot(weapon) //Distortion and lups flame effect
{
  return 0;
}

#define BASEPIECE base
#define HITSPEED <25.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 3
#define MAXTILT 200

#include "../unit_hitbyweaponid_and_smoke.h"

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*4;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 4096;
	set-signal-mask 4096;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.0125>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.0> speed <1.5>;
}

PilotLight(Func_Var_1)
{
	while( TRUE )
	{
		emit-sfx 1024 + 2 from flare;
		sleep 40;
	}
}


Create()
{
	hide wake2;
	hide wake1;
	hide flare;
	hide ground;
	gun_1 = 1;
	restore_delay = 3000;
	SLEEP_UNTIL_UNITFINISHED;
	start-script RockOnWaves();
	start-script PilotLight();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = 3000;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.0> speed <180.0>;
	turn sleeve to x-axis <0.0> speed <90.0>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.32] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving(reversing)
{
	signal SIGNAL_MOVE;
	set-signal-mask SIGNAL_MOVE;
	var waketime;
	start-script waveSplash();
	var bowtime;
	bowtime = 0;
	while( TRUE )
	{
		emit-sfx 1024 + 0 from wake1;
		if (bowtime) emit-sfx 1024 + 1 from wake2;
		bowtime = !bowtime;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIGNAL_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

AimWeapon1(heading, pitch)
{
	signal SIGNAL_AIM1;
	set-signal-mask SIGNAL_AIM1;
	turn turret to y-axis heading speed <150.0>;
	turn sleeve to x-axis -1*pitch speed <150.0>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
{
	call-script lua_FlameShot(1);
	emit-sfx 1024 + 3 from flare;
	return (TRUE);
}

AimFromWeapon1(pieceIndex)
{
	pieceIndex = sleeve;
	return (0);
}

QueryWeapon1(pieceIndex)
{
	pieceIndex = flare;
	return (0);
}

AimWeapon2(heading, pitch)
{
	signal SIGNAL_AIM2;
	set-signal-mask SIGNAL_AIM2;
	turn mturret to y-axis heading speed <300.0>;
	turn mbarrel to x-axis <0> - pitch speed <300>;  //?
	wait-for-turn mturret around y-axis;
	wait-for-turn mbarrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 1;
	}
	return (0);
}

AimFromWeapon2(pieceIndex)
{
	pieceIndex = mturret;
	return (0);
}

QueryWeapon2(pieceIndex)
{
	if( gun_1 == 1 )
	{
		pieceIndex = flare1;
	}
	if( gun_1 == 2 )
	{
		pieceIndex = flare2;
	}
	if( gun_1 == 3 )
	{
		pieceIndex = flare3;
	}
	return (0);
}



Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeve type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		explode turret type BITMAPONLY | BITMAP1 | NOHEATCLOUD;
		explode wake2 type BITMAPONLY | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sleeve type FALL | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
