
#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,flare,turret,door1,door2,barrel,bore, aimpoint;

static-var  TurretOpen, restore_delay, statechg_DesiredState, statechg_StateChanging, Reloading;


activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0> speed <300>;
		turn door2 to z-axis <0> speed <300>;
		wait-for-turn door1 around z-axis;
		sleep 100;
	}
	if( TRUE )
	{
		move door1 to y-axis [0] speed [17];
		move door2 to y-axis [0] speed [17];
		move turret to y-axis [0] speed [17];
		sleep 700;
	}
	if( TRUE )
	{
		move bore to z-axis [0] speed [12];
		move barrel to z-axis [0] speed [18];
		sleep 316;
	}
	sleep 10;
	return (0);
}

deactivatescr()
{
	
	
	if( TRUE )
	{   
		turn turret to y-axis <0> speed <100>;
		move bore to z-axis [-6] speed [12];
		move barrel to z-axis [-9] speed [18];
		sleep 316;
	}

	if( TRUE )
	{
		move door1 to y-axis [17] speed [17];
		move door2 to y-axis [17] speed [17];
		move turret to y-axis [-17] speed [17];
		sleep 700;
	}
	if( TRUE )
	{
		turn door1 to z-axis <-90> speed <300>;
		turn door2 to z-axis <90> speed <300>;
		wait-for-turn door1 around z-axis;
		sleep 100;
	}
	sleep 10;
	return (0);;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	if( !TurretOpen )
	{
		call-script activatescr();
	}
	TurretOpen = 1;
	set ARMORED to 0;
	return (0);
}

Stop()
{
	set ARMORED to 1;
	TurretOpen = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = FALSE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

static-var aimy1velocity, aimy1target, aimy1position, gameFrame;

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <100.016484>;
	turn turret to x-axis <0.000000> speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	
	aimy1position = 0;
	aimy1velocity = 0;
	start-script RequestState(1);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide flare;
			statechg_DesiredState=1;
	TurretOpen = 0;
	Reloading = 0;
	restore_delay = 10000;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(1);
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
			//call-script Go();
	start-script RestoreAfterDelay();
	return (0);
}

Reload1()
{
	sleep 2100;
	Reloading = 0;
	return (0);
}

Reload2()
{
	sleep 3780;
	Reloading = 0;
	return (0);
}

/*SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
	return (0);
}*/

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
#define MAX_AIMY1_VELOCITY <4.00>
#define AIMY1_ACCELERATION <0.25>
#define AIMY1_JERK <1.0>
#define AIMY1_PRECISION <1.2>
#define AIMY1_RESTORE_SPEED <1.0>

static-var aimy1delta, timetozero, deceleratethreshold;

AimWeaponBoth(heading, pitch)
{

	aimy1target = heading;
	aimy1delta = aimy1target - aimy1position;

	while( ( get ABS(aimy1delta) > AIMY1_PRECISION ) OR (get ABS(aimy1velocity) > AIMY1_JERK)){
		if (gameFrame != get(GAME_FRAME)){ //this is to make sure we dont get double-called, as previous aimweapon thread runs before new aimweaponthread can signal-kill previous one 
			gameFrame = get(GAME_FRAME);
	
			//Clamp aimy1position and aimy1delta between <-180>;<180>
			while (aimy1position >  <180>) aimy1position = aimy1position - <360>;
			while (aimy1position < <-180>) aimy1position = aimy1position + <360>;
			while (aimy1delta >  <180>) aimy1delta = aimy1delta - <360>;
			while (aimy1delta < <-180>) aimy1delta = aimy1delta + <360>;
		
			//number of frames required to decelerate to 0
			timetozero = get ABS(aimy1velocity) / AIMY1_ACCELERATION;
			
			//distance from target where we should start decelerating, always 'positive'
			//pos = t * v - (t*(t-1)*a/2)
			deceleratethreshold = timetozero * (get ABS(aimy1velocity)) - (timetozero * (timetozero - 1) * AIMY1_ACCELERATION / 2); 
			
			//get PRINT ( aimy1delta , deceleratethreshold, aimy1velocity, timetozero );
			
			if (get ABS(aimy1delta) <= deceleratethreshold){ //we need to decelerate
				if (aimy1velocity > 0) aimy1velocity = aimy1velocity - AIMY1_ACCELERATION;
				else 				   aimy1velocity = aimy1velocity + AIMY1_ACCELERATION;
			}	
			else //we need to accelerate
			{
				if (aimy1delta > 0) aimy1velocity = get MIN(       MAX_AIMY1_VELOCITY, aimy1velocity + AIMY1_ACCELERATION); 
				else                aimy1velocity = get MAX((-1) * MAX_AIMY1_VELOCITY, aimy1velocity - AIMY1_ACCELERATION);
			}
			
			//Apply jerk at very low velocities
			if (get ABS(aimy1velocity) < AIMY1_JERK){
				if ((aimy1delta >        AIMY1_JERK)) aimy1velocity =        AIMY1_JERK;
				if ((aimy1delta < (-1) * AIMY1_JERK)) aimy1velocity = (-1) * AIMY1_JERK;
			}
			
			aimy1position = aimy1position + aimy1velocity; 
			turn turret to y-axis aimy1position now;
			aimy1delta = aimy1target - aimy1position ; 	
		}
		sleep 30;		
	}
	aimy1velocity = 0;
	return (1);
}


AimWeapon1(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	if( pitch >= 10012)
	{
		return (0);
	}
	while( !TurretOpen )
	{
		sleep 250;
	}
	turn turret to x-axis <0.000000> - pitch speed <50.005495>;
	call-script AimWeaponBoth(heading, pitch);
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	if (Reloading == 1 ) return (0);
	return (1);
}

FireWeapon1()
{
	Reloading = 1;
	start-script Reload1();
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-4.000000] speed [500.000000];
	sleep 150;
	move barrel to z-axis [0.000000] speed [3.000000];
	return (0);
}

AimFromWeapon1(piecenum)
{
	piecenum = aimpoint;
}

QueryWeapon1(piecenum)
{
	piecenum = 1;
	return (0);
}

AimWeapon2(heading, pitch)
{
	start-script RequestState(0);
	signal 4;
	set-signal-mask 4;
	if( pitch < 10012 )
	{
		return (0);
	}
	while( !TurretOpen )
	{
		sleep 250;
	}
	turn turret to x-axis <0.000000> - pitch speed <50.005495>;
	call-script AimWeaponBoth(heading, pitch);
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	
	if (Reloading == 1 ) return (0);
	return (1);
}

FireWeapon2()
{
	Reloading = 1;
	start-script Reload2();
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-4.000000] speed [500.000000];
	sleep 150;
	move barrel to z-axis [0.000000] speed [3.000000];
	return (0);
}

AimFromWeapon2(piecenum)
{
	piecenum = 2;
	return (0);
}

QueryWeapon2(Func_Var_1)
{
	Func_Var_1 = 1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode bore type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode bore type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
