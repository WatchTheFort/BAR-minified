
#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base,flare,turret,door1,door2,barrel,bore,aimpoint;

static-var  AIMING, Static_Var_1, Static_Var_2, gun_2, wpn1_lasthead, wpn2_lasthead, statechg_DesiredState, statechg_StateChanging,restore_delay,oldTurretOpen, oldrestore_delay, oldstatechg_DesiredState, oldstatechg_StateChanging, oldReloading;
#define SIG_AIM				2
#define SIG_AIM_2			8

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0> speed <300>;
		turn door2 to z-axis <0> speed <300>;
		wait-for-turn door1 around z-axis;
		sleep 100;
	}
	if( TRUE )
	{
		move door1 to y-axis [0] speed [17];
		move door2 to y-axis [0] speed [17];
		move turret to y-axis [0] speed [17];
		sleep 700;
	}
	if( TRUE )
	{
		move bore to z-axis [0] speed [12];
		move barrel to z-axis [0] speed [18];
		sleep 316;
	}
	sleep 10;
	return (0);
}

deactivatescr()
{
	
	
	if( TRUE )
	{   
		turn turret to y-axis <0> speed <100>;
		move bore to z-axis [-6] speed [12];
		move barrel to z-axis [-9] speed [18];
		sleep 316;
	}

	if( TRUE )
	{
		move door1 to y-axis [17] speed [17];
		move door2 to y-axis [17] speed [17];
		move turret to y-axis [-17] speed [17];
		sleep 700;
	}
	if( TRUE )
	{
		turn door1 to z-axis <-90> speed <300>;
		turn door2 to z-axis <90> speed <300>;
		wait-for-turn door1 around z-axis;
		sleep 100;
	}
	sleep 10;
	return (0);;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	if( !oldTurretOpen )
	{
		call-script activatescr();
	}
	oldTurretOpen = 1;
	set ARMORED to 0;
	return (0);
}

Stop()
{
	set ARMORED to 1;
	oldTurretOpen = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	oldstatechg_DesiredState = FALSE;
	oldstatechg_StateChanging = FALSE;
	statechg_DesiredState = FALSE;
	statechg_StateChanging = FALSE;
	return (0);
}

oldRequestState(requestedstate, currentstate)
{
	if( oldstatechg_StateChanging )
	{
		oldstatechg_DesiredState = requestedstate;
		return (0);
	}
	oldstatechg_StateChanging = TRUE;
	currentstate = oldstatechg_DesiredState;
	oldstatechg_DesiredState = requestedstate;
	while( oldstatechg_DesiredState != currentstate )
	{
		if( oldstatechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( oldstatechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	oldstatechg_StateChanging = FALSE;
}
RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			Static_Var_2 = 0;
			currentstate = 1;
		}
		else
		{
			Static_Var_2 = 1;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

static-var aimy1velocity, aimy1target, aimy1position, gameFrame;

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <100.016484>;
	turn turret to x-axis <0.000000> speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	
	aimy1position = 0;
	aimy1velocity = 0;
	start-script oldRequestState(1);
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	sleep oldrestore_delay;
	start-script ExecuteRestoreAfterDelay();
}

Create()
{
	hide flare;
	oldstatechg_DesiredState=1;
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	gun_2 = barrel;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	restore_delay = 100;
	oldTurretOpen = 0;
	oldReloading = 0;
	oldrestore_delay = 10000;
	AIMING = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script oldRequestState(1);
	start-script RequestState(1);
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
			//call-script Go();
	start-script RestoreAfterDelay();
	return (0);
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

Reload1()
{
	sleep 2100;
	oldReloading = 0;
	return (0);
}

Reload2()
{
	sleep 3780;
	oldReloading = 0;
	return (0);
}

/*SetMaxReloadTime(Func_Var_1)
{
	oldrestore_delay = Func_Var_1 * 5;
	return (0);
}*/

//-------------------------------CONSTANT ACCELERATION TURRET TURNING---------------------------
// MaxVelocity and acceleration are in degrees per frame (not second!)
// Jerk is the minimum velocity of the turret
// A high precision requirement can result in overshoots if desired 
// (c) CC BY NC ND Beherith mysterme@gmail.com
#define MAX_AIMY1_VELOCITY <4.00>
#define AIMY1_ACCELERATION <0.25>
#define AIMY1_JERK <1.0>
#define AIMY1_PRECISION <1.2>
#define AIMY1_RESTORE_SPEED <1.0>

static-var aimy1delta, timetozero, deceleratethreshold;

AimPrimary(heading, pitch)
{
	start-script oldRequestState(0);
	signal SIG_AIM;
	if(AIMING == 1 OR Static_Var_2 == 1 OR gun_2 == 1 )
	 {
	 	return(0);
	 }
	AIMING = 1;
	while( oldTurretOpen == 0 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <30.000000>;
	turn turret to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	wpn1_lasthead = heading;
	AIMING = 0;
	return (1);
}

AimSecondary(heading, pitch)
{
	start-script oldRequestState(0);
	signal SIG_AIM;
	if(AIMING == 1 OR Static_Var_2 == 0 OR gun_2 == 1 )
	{
		return(0);
	}
	AIMING = 1;
	while( oldTurretOpen == 0 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <30.000000>;
	turn turret to x-axis <0.000000> - pitch speed <45.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	wpn2_lasthead = heading;
	AIMING = 0;
	return (1);
}

FirePrimary()
{
	oldReloading = 1;
	start-script Reload1();
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-4.000000] speed [500.000000];
	sleep 150;
	move barrel to z-axis [0.000000] speed [3.000000];
}

FireSecondary()
{
	oldReloading = 1;
	start-script Reload1();
	emit-sfx 1024 + 0 from flare;
	move barrel to z-axis [-4.000000] speed [500.000000];
	sleep 150;
	move barrel to z-axis [0.000000] speed [3.000000];
}

AimFromPrimary(piecenum)
{
	piecenum = aimpoint;
}

AimFromSecondary(piecenum)
{
	piecenum = aimpoint;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type BITMAPONLY | NOHEATCLOUD;
		explode door2 type BITMAPONLY | NOHEATCLOUD;
		explode turret type BITMAPONLY | NOHEATCLOUD;
		explode bore type BITMAPONLY | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode door1 type FALL | NOHEATCLOUD;
		explode door2 type FALL | NOHEATCLOUD;
		explode turret type FALL | NOHEATCLOUD;
		explode bore type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door1 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode door2 type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode turret type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode bore type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flare type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
	return corpsetype;
}
