#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turretl, sleevel, barrell, flarel, turretr, sleever, barrelr, flarer, 
       turretf, sleevef, barrelf, flaref, thrustrr, thrustrl, thrustfr, thrustfl, 
       thrustrra, thrustrla, thrustfra, thrustfla;
       

static-var  restore_delay, v1;

// Signal definitions
#define SIG_AIM				4
#define SIG_AIM_2			8
#define SIG_AIM_3			16

#define BASEPIECE base
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 5
#define MAXTILT 100
HitByWeapon(anglex, anglez, damage)	// angle[x|z] is always [-500;500], damage is multiplied by 100
{
	var amount;//, speedz, speedx;
	amount = damage / (100 * UNITSIZE);
	if (amount < 3  ) return (0);
	if (amount > MAXTILT) amount = MAXTILT;
	//get PRINT(anglex, anglez, amount, damage);
	//speedz = HITSPEED * get ABS(anglez) / 500; //nevermind this, the random error this produces actually looks better than the accurate version
	turn BASEPIECE to z-axis (anglez * amount) / 100  speed HITSPEED;
	turn BASEPIECE to x-axis <0> - (anglex * amount) /100 speed HITSPEED;
	wait-for-turn BASEPIECE around z-axis;
	wait-for-turn BASEPIECE around x-axis;
	turn BASEPIECE to z-axis <0.000000> speed HITSPEED / 4;
	turn BASEPIECE to x-axis <0.000000> speed HITSPEED / 4;
}
HitByWeaponId(anglex, anglez, weaponid, dmg) //weaponID is always 0,lasers and flamers give angles of 0
{
	start-script HitByWeapon(dmg, anglez,anglex); //I dont know why param order must be switched, and this also runs a frame later :(
	return (100); //return damage percent
}


#define IDLEHOVERSCALE 32
#define IDLEHOVERSPEED 60
#define IDLEBASEPIECE base
#include "idlehover.h"
SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script IdleHover();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( (healthpercent < 66) AND (healthpercent > 0 ))
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
	sleep 1500;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryPrimary(piecenum)
{
	piecenum = flaref;
}

QuerySecondary(piecenum)
{
	piecenum = flarel;
}

QueryTertiary(piecenum)
{
	piecenum = flarer;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

static-var  Stunned;
ExecuteRestoreAfterDelay()
{
    if (Stunned) {
        return (1);
    }
	turn base to y-axis <0.000000> speed <250.000000>;
	turn base to x-axis <0.000000> speed <250.000000>;
	turn turretf to z-axis <0> speed <250>;
	turn sleevef to x-axis <0> speed <250>;

	turn turretl to x-axis <0> speed <250>;
	turn sleevel to y-axis <0> speed <250>;

	turn turretr to x-axis <0> speed <250>;
	turn sleever to y-axis <0> speed <250>;
}
SetStunned(State)
{
    Stunned = State;
	if (!Stunned) {
	    start-script ExecuteRestoreAfterDelay();
	}
}
RestoreAfterDelay()
{
	sleep restore_delay;
	start-script ExecuteRestoreAfterDelay();
}

StartMoving()
{
	sleep 1000;
}

StopMoving()
{
}

MoveRate0()
{
	turn thrustrr to x-axis <0.000000> speed <80.000000>;
	turn thrustrl to x-axis <0.000000> speed <80.000000>;
	turn thrustfr to x-axis <0.000000> speed <80.000000>;
	turn thrustfl to x-axis <0.000000> speed <80.000000>;
}

MoveRate1()
{
	turn thrustrr to x-axis <8.000000> speed <60.000000>;
	turn thrustrl to x-axis <8.000000> speed <60.000000>;
	turn thrustfr to x-axis <8.000000> speed <60.000000>;
	turn thrustfl to x-axis <8.000000> speed <60.000000>;
}

MoveRate2()
{
	turn thrustrr to x-axis <18.000000> speed <45.000000>;
	turn thrustrl to x-axis <18.000000> speed <45.000000>;
	turn thrustfr to x-axis <18.000000> speed <45.000000>;
	turn thrustfl to x-axis <18.000000> speed <45.000000>;
}

MoveRate3()
{
	turn thrustrr to x-axis <0.000000> speed <70.000000>;
	turn thrustrl to x-axis <0.000000> speed <70.000000>;
	turn thrustfr to x-axis <0.000000> speed <70.000000>;
	turn thrustfl to x-axis <0.000000> speed <70.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	
	
	var p;
	var h;
	var a;
	p = get KTAN(pitch);
	h = get KTAN(heading);
	a = get ATAN(h, p);
	turn turretf to z-axis a speed <200.000000>;

	a = get HYPOT(h, p);
	a = get ATAN(a, 1000);
	turn sleevef to x-axis <0> - a speed <200.000000>;
	wait-for-turn turretf around z-axis;
	wait-for-turn sleevef around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	var aimto;
	aimto= <-90> + heading;
	if (aimto > <90>) {
		aimto = <90>;
	}
	if (aimto < <-90>) {
		aimto = <-90>;
	}
	//turn turretl to x-axis  speed <200.000000>;
	turn sleevel to y-axis aimto speed <200.000000>;
	wait-for-turn sleevel around y-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	var aimto;
	aimto= <90> + heading;
	if (aimto > <90>) {
		aimto = <90>;
	}
	if (aimto < <-90>) {
		aimto = <-90>;
	}
	//turn turretr to x-axis heading speed <200.000000>;
	turn sleever to y-axis aimto speed <200.000000>;
	wait-for-turn sleever around y-axis;
	return (1);
}

FirePrimary()
{
	sleep 100;
}

FireSecondary()
{
	sleep 100;
}

FireTertiary()
{
	sleep 100;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretf type BITMAPONLY | NOHEATCLOUD;
		explode sleevef type BITMAPONLY | NOHEATCLOUD;
		explode barrelf type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flaref type BITMAPONLY | NOHEATCLOUD;
		explode turretr type BITMAPONLY | NOHEATCLOUD;
		explode sleever type BITMAPONLY | NOHEATCLOUD;
		explode barrelr type BITMAPONLY | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type BITMAPONLY | NOHEATCLOUD;
		explode sleevel type BITMAPONLY | NOHEATCLOUD;
		explode barrell type BITMAPONLY | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretf type BITMAPONLY | NOHEATCLOUD;
		explode sleevef type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelf type FALL | NOHEATCLOUD;
		explode flaref type BITMAPONLY | NOHEATCLOUD;
		explode turretr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleever type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleevel type FALL | NOHEATCLOUD;
		explode barrell type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretf type BITMAPONLY | NOHEATCLOUD;
		explode sleevef type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelf type SMOKE | FALL | NOHEATCLOUD;
		explode flaref type BITMAPONLY | NOHEATCLOUD;
		explode turretr type SMOKE | FALL | NOHEATCLOUD;
		explode sleever type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode sleevel type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrell type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode turretf type BITMAPONLY | NOHEATCLOUD;
		explode sleevef type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelf type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flaref type BITMAPONLY | NOHEATCLOUD;
		explode turretr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode sleever type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode barrelr type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flarer type BITMAPONLY | NOHEATCLOUD;
		explode turretl type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode sleevel type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode barrell type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode flarel type BITMAPONLY | NOHEATCLOUD;
		explode thrustrl type BITMAPONLY | NOHEATCLOUD;
		explode thrustrla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfl type BITMAPONLY | NOHEATCLOUD;
		explode thrustfla type BITMAPONLY | NOHEATCLOUD;
		explode thrustfr type BITMAPONLY | NOHEATCLOUD;
		explode thrustfra type BITMAPONLY | NOHEATCLOUD;
		explode thrustrr type BITMAPONLY | NOHEATCLOUD;
		explode thrustrra type BITMAPONLY | NOHEATCLOUD;
	return corpsetype;
}
