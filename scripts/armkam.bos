#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, carlingue, raile, rwing, laile, lwing, lflare, rflare,
       flash;

// Signal definitions
#define SIG_MOVE			2


Create()
{
	hide lflare;
	hide rflare;
	hide flash;
}

RestoreAfterDelay()
{
}

MoveRate0()
{
	turn rwing to x-axis <-90.000000> speed <50.000000>;
	turn lwing to x-axis <-90.000000> speed <50.000000>;
	turn base to z-axis <0.000000> speed <120.000000>;
}

MoveRate1()
{
	turn base to z-axis <0.000000> speed <120.000000>;
	turn rwing to x-axis <-90.000000> speed <50.000000>;
	turn lwing to x-axis <-90.000000> speed <50.000000>;
}

MoveRate2()
{
	set-signal-mask SIG_MOVE;
	turn rwing to x-axis <-20.000000> speed <50.000000>;
	turn lwing to x-axis <20.000000> speed <50.000000>;
	turn base to z-axis <240.000000> speed <120.000000>;
	wait-for-turn base around z-axis;
	turn base to z-axis <120.000000> speed <180.000000>;
	wait-for-turn base around z-axis;
	turn base to z-axis <0.000000> speed <120.000000>;
	turn rwing to x-axis <0.000000> speed <50.000000>;
	turn lwing to x-axis <0.000000> speed <50.000000>;
}

MoveRate3()
{
	turn rwing to x-axis <0.000000> speed <50.000000>;
	turn lwing to x-axis <0.000000> speed <50.000000>;
	turn base to z-axis <0.000000> speed <120.000000>;
}

AimFromPrimary(piecenum)
{
	piecenum = flash;
}

AimPrimary(heading, pitch)
{
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

FirePrimary()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	turn base to z-axis <0.000000> speed <120.000000>;
	turn rwing to x-axis <270.000000> speed <50.000000>;
	turn lwing to x-axis <270.000000> speed <50.000000>;
	wait-for-turn rwing around x-axis;
	wait-for-turn lwing around x-axis;
	show flash;
	sleep 200;
	hide flash;
}

StartMoving()
{
	turn raile to z-axis <0.000000> speed <60.000000>;
	turn laile to z-axis <0.000000> speed <60.000000>;
}

StopMoving()
{
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	corpsetype = 1;
	//explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	//explode carlingue type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode rwing type 30 | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode lwing type 30 | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	return corpsetype;
}
