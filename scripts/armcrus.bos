#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, ground, wake1, wake2, turret1, sleeve1, barrel11, flare11, barrel12, flare12, turret2, sleeve2, barrel21, flare21, barrel22, flare22, turret3, sleeve3, barrel31, flare31, barrel32, flare32, turret4, sleeve4, barrel41, flare41, barrel42, flare42, turret5, sleeve5, barrel51, flare51, barrel52, flare52, turret6, sleeve6, barrel61, flare61, barrel62, flare62, turret7, sleeve7, barrel71, flare71, barrel72, flare72, turret8, sleeve8, barrel8, flare8, emit8, turret9, sleeve9, barrel9, flare9, emit9, turret10, sleeve10, barrel10, flare10, emit10, turret11, sleeve11, barrel111, flare111, emit111;
		
static-var  gun_1, gun_2, gun_3, gun_4, gun_5, gun_6, gun_7, restore_delay, Static_Var_7, Static_Var_8, aimDir, oldHead;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8
#define SIG_AIM_4			16
#define SIG_AIM_5			32
#define SIG_AIM_6			64
#define SIG_AIM_7			128
#define SIG_AIM_8			256
#define SIG_AIM_9			512
#define SIG_AIM_10			1024
#define SIG_AIM_11			2048
#define SIG_MOVE			4096


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*4;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_7 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_7 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_7 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_7 = Func_Var_1;
	}
	else
	{
		Static_Var_7 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 4096;
	set-signal-mask 4096;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_8 = Static_Var_8 + Static_Var_7;
	Static_Var_7 = get ABS(Static_Var_8);
	while( Static_Var_7 > 91 )
	{
		turn base to z-axis Static_Var_8 speed Static_Var_7 * <0.025>;
		wait-for-turn base around z-axis;
		Static_Var_8 = Static_Var_8 * -1 / 2;
		Static_Var_7 = get ABS(Static_Var_8);
	}
	turn base to z-axis <0.000000> speed <1.5>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	hide flare31;
	hide flare32;
	hide flare41;
	hide flare42;
	hide flare51;
	hide flare52;
	hide flare61;
	hide flare62;
	hide flare71;
	hide flare72;
	hide flare8;
	hide flare9;
	hide flare10;
	hide flare111;
	hide emit8;
	hide emit9;
	hide emit10;
	hide emit111;
	gun_1 = flare11;
	gun_2 = flare21;
	gun_3 = flare31;
	gun_4 = flare41;
	gun_5 = flare51;
	gun_6 = flare61;
	gun_7 = flare71;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret1 to y-axis <0.000000> speed <55.000000>;
	turn sleeve1 to x-axis <0.000000> speed <15.000000>;
	
	turn turret2 to y-axis <0.000000> speed <55.000000>;
	turn sleeve2 to x-axis <0.000000> speed <15.000000>;
	
	turn turret3 to y-axis <0.000000> speed <55.000000>;
	turn sleeve3 to x-axis <0.000000> speed <15.000000>;
	
	turn turret4 to y-axis <0.000000> speed <55.000000>;
	turn sleeve4 to x-axis <0.000000> speed <15.000000>;
	
	turn turret5 to y-axis <0.000000> speed <55.000000>;
	turn sleeve5 to x-axis <0.000000> speed <15.000000>;
	
	turn turret6 to y-axis <0.000000> speed <55.000000>;
	turn sleeve6 to x-axis <0.000000> speed <15.000000>;
	
	turn turret7 to y-axis <0.000000> speed <55.000000>;
	turn sleeve7 to x-axis <0.000000> speed <15.000000>;
	
	turn turret8 to y-axis <0.000000> speed <55.000000>;
	turn sleeve8 to x-axis <0.000000> speed <15.000000>;
	
	turn turret9 to y-axis <0.000000> speed <55.000000>;
	turn sleeve9 to x-axis <0.000000> speed <15.000000>;
	
	turn turret10 to y-axis <0.000000> speed <55.000000>;
	turn sleeve10 to x-axis <0.000000> speed <15.000000>;
	
	turn turret11 to y-axis <0.000000> speed <55.000000>;
	turn sleeve11 to x-axis <0.000000> speed <15.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.32] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}


AimWeapon8(heading, pitch)
{
	signal SIG_AIM_8;
	turn turret8 to y-axis heading speed <300.071429>;
	turn sleeve8 to x-axis <0.000000> - pitch speed <200.043956>;
	wait-for-turn turret8 around y-axis;
	wait-for-turn sleeve8 around x-axis;
	return (1);
}
FireWeapon8()
{
	emit-sfx 1024 + 0 from flare8;
}
AimFromWeapon8(piecenum)
{
	piecenum = sleeve8;
}
QueryWeapon8(piecenum)
{
	piecenum = flare8;
}

AimWeapon9(heading, pitch)
{
	signal SIG_AIM_9;
	turn turret9 to y-axis heading speed <300.071429>;
	turn sleeve9 to x-axis <0.000000> - pitch speed <200.043956>;
	wait-for-turn turret9 around y-axis;
	wait-for-turn sleeve9 around x-axis;
	return (1);
}
FireWeapon9()
{
	emit-sfx 1024 + 0 from flare9;
}
AimFromWeapon9(piecenum)
{
	piecenum = sleeve9;
}
QueryWeapon9(piecenum)
{
	piecenum = flare9;
}

AimWeapon10(heading, pitch)
{
	signal SIG_AIM_10;
	turn turret10 to y-axis heading speed <300.071429>;
	turn sleeve10 to x-axis <0.000000> - pitch speed <200.043956>;
	wait-for-turn turret10 around y-axis;
	wait-for-turn sleeve10 around x-axis;
	return (1);
}
FireWeapon10()
{
	emit-sfx 1024 + 0 from flare10;
}
AimFromWeapon10(piecenum)
{
	piecenum = sleeve10;
}
QueryWeapon10(piecenum)
{
	piecenum = flare10;
}

AimWeapon11(heading, pitch)
{
	signal SIG_AIM_11;
	turn turret11 to y-axis heading speed <300.071429>;
	turn sleeve11 to x-axis <0.000000> - pitch speed <200.043956>;
	wait-for-turn turret11 around y-axis;
	wait-for-turn sleeve11 around x-axis;
	return (1);
}
FireWeapon11()
{
	emit-sfx 1024 + 0 from flare111;
}
AimFromWeapon11(piecenum)
{
	piecenum = sleeve11;
}
QueryWeapon11(piecenum)
{
	piecenum = flare111;
}

AimWeapon1(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <50.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	start-script RockZ(-9,aimDir);
	if( gun_1 )
	{
		move barrel12 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel12 along z-axis;
		move barrel12 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare12;
	}
	else
	{
		move barrel11 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel11 along z-axis;
		move barrel11 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare11;
	}
	gun_1 = !gun_1;
}

AimFromWeapon1(piecenum)
{
	piecenum = turret1;
}

QueryWeapon1(piecenum)
{
	piecenum = flare11 + gun_1;
}

AimWeapon2(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <50.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn sleeve2 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	start-script RockZ(-9,aimDir);
	if( gun_2 )
	{
		move barrel22 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel22 along z-axis;
		move barrel22 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare22;
	}
	else
	{
		move barrel21 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel21 along z-axis;
		move barrel21 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare21;
	}
	gun_2 = !gun_2;
}

AimFromWeapon2(piecenum)
{
	piecenum = turret2;
}

QueryWeapon2(piecenum)
{
	piecenum = flare21 + gun_2;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turret3 to y-axis heading speed <50.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon3()
{
	if( gun_3 )
	{
		move barrel32 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel32 along z-axis;
		move barrel32 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare32;
	}
	else
	{
		move barrel31 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel31 along z-axis;
		move barrel31 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare31;
	}
	gun_3 = !gun_3;
}

AimFromWeapon3(piecenum)
{
	piecenum = turret3;
}

QueryWeapon3(piecenum)
{
	piecenum = flare31 + gun_3;
}

AimWeapon4(heading, pitch)
{
	signal SIG_AIM_4;
	set-signal-mask SIG_AIM_4;
	turn turret4 to y-axis heading speed <200.000000>;
	turn sleeve4 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret4 around y-axis;
	wait-for-turn sleeve4 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon4()
{
	if( gun_4 )
	{
		move barrel42 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel42 along z-axis;
		move barrel42 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare42;
	}
	else
	{
		move barrel41 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel41 along z-axis;
		move barrel41 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare41;
	}
	gun_4 = !gun_4;
}

AimFromWeapon4(piecenum)
{
	piecenum = turret4;
}

QueryWeapon4(piecenum)
{
	piecenum = flare41 + gun_4;
}

AimWeapon5(heading, pitch)
{
	signal SIG_AIM_5;
	set-signal-mask SIG_AIM_5;
	turn turret5 to y-axis heading speed <200.000000>;
	turn sleeve5 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret5 around y-axis;
	wait-for-turn sleeve5 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon5()
{
	if( gun_5 )
	{
		move barrel52 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel52 along z-axis;
		move barrel52 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare52;
	}
	else
	{
		move barrel51 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel51 along z-axis;
		move barrel51 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare51;
	}
	gun_5 = !gun_5;
}

AimFromWeapon5(piecenum)
{
	piecenum = turret5;
}

QueryWeapon5(piecenum)
{
	piecenum = flare51 + gun_5;
}

AimWeapon6(heading, pitch)
{
	signal SIG_AIM_6;
	set-signal-mask SIG_AIM_6;
	turn turret6 to y-axis heading speed <200.000000>;
	turn sleeve6 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret6 around y-axis;
	wait-for-turn sleeve6 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon6()
{
	if( gun_6 )
	{
		move barrel62 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel62 along z-axis;
		move barrel62 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare62;
	}
	else
	{
		move barrel61 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel61 along z-axis;
		move barrel61 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare61;
	}
	gun_6 = !gun_6;
}

AimFromWeapon6(piecenum)
{
	piecenum = turret6;
}

QueryWeapon6(piecenum)
{
	piecenum = flare61 + gun_6;
}

AimWeapon7(heading, pitch)
{
	signal SIG_AIM_7;
	set-signal-mask SIG_AIM_7;
	turn turret7 to y-axis heading speed <200.000000>;
	turn sleeve7 to x-axis <0.000000> - pitch speed <40.000000>;
	wait-for-turn turret7 around y-axis;
	wait-for-turn sleeve7 around x-axis;
	aimDir = heading;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon7()
{
	if( gun_7 )
	{
		move barrel72 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel72 along z-axis;
		move barrel72 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare72;
	}
	else
	{
		move barrel71 to z-axis [-2.000000] speed [500.000000];
		wait-for-move barrel71 along z-axis;
		move barrel71 to z-axis [0.000000] speed [3.000000];
		emit-sfx 1024 + 0 from flare71;
	}
	gun_7 = !gun_7;
}

AimFromWeapon7(piecenum)
{
	piecenum = turret7;
}

QueryWeapon7(piecenum)
{
	piecenum = flare71 + gun_7;
}


SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel11 type BITMAPONLY | BITMAP1;
		explode barrel12 type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode turret3 type BITMAPONLY | BITMAP1;
		explode turret8 type BITMAPONLY | BITMAP3;
		explode turret9 type BITMAPONLY | BITMAP1;
		explode wake1 type BITMAPONLY | BITMAP2;
		explode wake2 type BITMAPONLY | BITMAP3;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel11 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode barrel12 type FALL | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode turret2 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode turret3 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode turret8 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve9 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve11 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake1 type FALL | EXPLODE_ON_HIT | BITMAP2;
		explode wake2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP3;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret5 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode turret9 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode turret10 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return corpsetype;
}
