#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, arms, ear1, ear2, turret, sleeve, flare1, flare2;

static-var  Static_Var_1, restore_delay, Static_Var_3, Static_Var_4, Static_Var_5,
            gun_1, Static_Var_7, Static_Var_8, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT ) 
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
}

Stop()
{
}

Create()
{
	gun_1 = base;
	hide flare1;
	hide flare2;
	spin arms around y-axis speed <-100> accelerate <1>;
	spin ear1 around x-axis speed <50> accelerate <1>;
	spin ear2 around x-axis speed <50> accelerate <1>;
	start-script SmokeUnit();
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <300>;
	turn sleeve to x-axis <0.000000> - pitch speed <100>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show flare1;
		sleep 150;
		hide flare1;
	}
	if( gun_1 == 1 )
	{
		show flare2;
		sleep 150;
		hide flare2;
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = base;
	}
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arms type SHATTER | BITMAP2 | NOHEATCLOUD;
		explode ear1 type FALL | BITMAP3 | NOHEATCLOUD;
		explode ear2 type FALL | BITMAP2 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode sleeve type FALL | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode ear1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode ear2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode turret type SHATTER | BITMAP3 | NOHEATCLOUD;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arms type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode ear1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode ear2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode base type SHATTER | NOHEATCLOUD;
	explode turret type SHATTER | BITMAP3 | NOHEATCLOUD;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return corpsetype;
}
