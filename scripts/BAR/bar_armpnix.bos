#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wingl, wingr, thrusta, thrustb, drop,
       doorl, doorr, circle;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

activatescr()
{
	if( TRUE )
	{
		move wingl to x-axis [-7.0000] speed [7];
		move wingr to x-axis [7.0000] speed [7];
		sleep 998;
	}
	sleep 44;
}

deactivatescr()
{
	if( TRUE )
	{
		move wingl to x-axis [0] speed [7];
		move wingr to x-axis [0] speed [7];
		move doorl to x-axis [0] speed [7];
		move doorr to x-axis [0] speed [7];
		sleep 998;
	}
	sleep 44;
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.000000>;
	turn base to x-axis <0> - anglex speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <15.000000>;
	turn base to x-axis <0.000000> speed <15.000000>;
}


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 3000;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

RestoreAfterDelay()
{
	sleep Static_Var_1;
}
AimWeaponX(heading, pitch)
{
	
		move doorl to x-axis [-5] speed [7];
		move doorr to x-axis [5] speed [7];
		return 1;
}

QueryPrimary(piecenum)
{
	piecenum = drop;
}
SweetSpot(piecenum)
{
	piecenum = base;
}
FireWeaponPrimary()
{
	turn circle to y-axis  <240> speed <300>;
	wait-for-turn circle around y-axis;
	turn circle to y-axis  <0> now;

}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode circle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingr type BITMAPONLY | NOHEATCLOUD;
		explode doorr type BITMAPONLY | NOHEATCLOUD;
		explode wingl type BITMAPONLY | NOHEATCLOUD;
		explode doorl type BITMAPONLY | NOHEATCLOUD;
		explode thrusta type BITMAPONLY | NOHEATCLOUD;
		explode drop type BITMAPONLY | NOHEATCLOUD;
		explode thrustb type BITMAPONLY | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode circle type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrusta type FALL | NOHEATCLOUD;
		explode drop type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustb type FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode circle type SMOKE | FALL | NOHEATCLOUD;
		explode wingr type SMOKE | FALL | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type EXPLODE_ON_HIT | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrusta type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode drop type FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustb type FIRE | SMOKE | FALL | NOHEATCLOUD;
		return(corpsetype);
	}
	corpsetype = 3 ;
		explode base type BITMAPONLY | NOHEATCLOUD;
		explode circle type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorr type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode wingl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode doorl type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrusta type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
		explode drop type EXPLODE_ON_HIT | FIRE | SMOKE | FALL | NOHEATCLOUD;
		explode thrustb type EXPLODE_ON_HIT | FIRE | FALL | NOHEATCLOUD;
	return corpsetype;
}
